# %% init
LAB_SCRIPT_PATH = "/home/local/USHERBROOKE/mora0502/Codes/Lab-Scripts" # ABSOLUTE PATH, without trailing /
LAB_SCRIPT_PATH = "C:\Codes\Lab-Scripts" # ABSOLUTE PATH, without trailing /

%cd $LAB_SCRIPT_PATH
LOG_PATH = LAB_SCRIPT_PATH + "/Spin/logs"

from pyHegel import instruments
from pyHegel.commands import wait

import numpy as np
from alive_progress import alive_bar, alive_it

from Utils import analyse as ua
from Utils import files as uf
from Utils import plot as up
from Utils import instruments as ui
from Utils import utils as uu

from Utils.plot import imshow
from Pulses.Builder import Pulse, genPWLFile

from Videomode.VideoModeWindow import VideoModeWindow, SweepAxis
# %% setup

awg = instruments.tektronix.tektronix_AWG('USB0::0x0699::0x0503::B030793::0')
gain = awg.gain = 1/(0.02512)*0.4
awg_sr = 10e3
channel = {'P1':1, 'P2':2}
send = lambda pulse, ch, awg_sr=awg_sr, run_after=False: ui.sendSeqToAWG(awg, pulse, channel=ch, run_after=run_after, awg_sr=awg_sr, round_nbpts_to_mod64='last')
awg.write('SOURce1:RMODe TRIGgered'); awg.write('SOURce1:TINPut BTrigger')
awg.write('SOURce2:RMODe TRIGgered'); awg.write('SOURce2:TINPut BTrigger')
awg.write('SOURce3:RMODe TRIGgered'); awg.write('SOURce3:TINPut BTrigger')
awg.write('SOURce1:DAC:RESolution 15') # 15 bits + 1 marker
awg.write('SOURce2:DAC:RESolution 15')
awg.write('SOURce3:DAC:RESolution 15')
# debug: awg.clear()

ats = instruments.ATSBoard(systemId=1, cardId=1)
ats.conf = lambda: {'sr':ats.sample_rate.get(), 'pts':ats.samples_per_record.get(), 't':ats.acquisition_length_sec.get()}
ats.active_channels.set(['A','B'])
ats.sample_rate.set(10000)
ats.trigger_level_1.set(1000)
ats.ConfigureBoard()
ats.nbwindows.set(1)
ats.trigger_delay.set(0)
def acquire(acq_time):
    ats.run_and_wait()
    awg.write('TRIGger BTRigger')
    wait(acq_time)
    data = ats.fetch.get()[2]
    return data

bi7 = instruments.iTest_be214x("TCPIP::192.168.150.112::5025::SOCKET", slot=7)
ST = instruments.LimitDevice((bi7.ramp, {'ch': 1}), min=-4.0, max=4.0)

#zi = instruments.zurich_UHF("dev2949")
#zi_get = lambda: commands.get((zi.readval, {'vals': ['r'], 'ch': 0}))[0]

rhP1 = bi3 = instruments.iTest_be2102("TCPIP::192.168.150.112::5025::SOCKET", slot=3)
rhP2 = bi1 = instruments.iTest_be2102("TCPIP::192.168.150.112::5025::SOCKET", slot=1)
def shiftP1(val): rhP1.ramp.set(rhP1.get()+val)
def shiftP2(val): rhP2.ramp.set(rhP2.get()+val)
set_function = {'P1': rhP1.ramp.set, 'P2': rhP2.ramp.set}
shift_function = {'P1': shiftP1, 'P2': shiftP2}

# %% VM RAMP

###### settings
ramp_on = 'P1'; step_on = 'P2' # 'P1' | 'P2'

valueRamp, deltaRamp, timeRamp = 1.102, 0.015, 0.010
valueStep, deltaStep, nbStep = 0.602, 0.008, 101

sync_time_after_ramp = 0.01
ramp_direction = 'up' # 'up' | 'down'
################

# pulses
listStep = np.linspace(valueStep-deltaStep, valueStep+deltaStep, nbStep)
pulseRamp = Pulse(name='ramp', shape_comp=True)
pulseRamp.add(timeRamp/2)
pulseRamp.addRamp(timeRamp, {'up': -1, 'down': +1}[ramp_direction]*deltaRamp,
                  {'up': +1, 'down': -1}[ramp_direction]*deltaRamp, mark=True)
pulseRamp.add(sync_time_after_ramp)

pulseStep = pulseRamp.genMarksOnly(name='step')
# pulseRamp.plot(pulseStep, wide=True, no_shape_comp=False)

# send to awg
send(pulseStep, channel[step_on])  # channel 1 (2) on P1 (P2)
send(pulseRamp, channel[ramp_on])
send(pulseRamp, ch=3, run_after=True)

ats.acquisition_length_sec.set(timeRamp)
#ats.sample_rate.set(100000)
set_function[step_on](valueStep)
set_function[ramp_on](valueRamp)

#  "video" mode

sweep = SweepAxis(
    listStep, fn_next=set_function[step_on], label=step_on, enable=True)


def vmget():
    sweep.next()
    data = acquire(timeRamp)
    if ramp_direction == 'down':
        data = np.flip(data)
    data = ua.gaussian(data, 2)
    return data

vm = VideoModeWindow(fn_get=vmget, dim=1, ylabel=f"{ramp_on} ramp {ramp_direction}", xsweep=sweep,
                     axes_dict={
                         'y': [valueRamp-deltaRamp, valueRamp+deltaRamp]},
                     fn_yshift=shift_function[ramp_on])

# %%% save
img = vm.data_buffer[0].T
up.imshow(img, x_label=step_on, y_label=ramp_on, x_axis=vm.x, y_axis=vm.y, cbar=False,
          title='B=800mT', filename='transition_B=800mT_retour', save=1, metadata=dict(pulseRamp=str(pulseRamp)), path=LOG_PATH)

# %% PSB pulse
##### settings
#   (P1  ,  P2)
# read center
R = (0    , 0)
L = (-.013, 0 )
E = (-.010 , -.005)

tR, tL, tE = 1.0, 0.01, 0.01
read_delta = dict(P1=0.000, P2=-0.000)

tw = 0.015
acq_on = 'full' # 'full' | 'read'
acq_after_pulse = 1

# vm
read_level = {'P1': 1.1, 'P2': 0.600}
to_sweep = 'P1'
sweep_delta, sweep_nb = 0.0001, 101
x_axis = 'P2'  # 'P1' | 'P2' | 'time'
filt = True # gaussian filter
##############

pulseP1 = Pulse(name='P1', shape_comp=True)
pulseP1.add(tw)
pulseP1.add(tL, offset=L[0], mark=acq_on=='full')
pulseP1.add(tE, offset=E[0], mark=acq_on=='full')
pulseP1.add(tL, offset=L[0], mark={'full':True, 'read':(0.9, 1)}[acq_on])
pulseP1.addRamp(tR, -read_delta['P1'], +read_delta['P1'], offset=R[0], mark=(0, 0.9))

pulseP2 = Pulse(name='P2', shape_comp=True)
pulseP2.add(tw)
pulseP2.add(tL, offset=L[1], mark=acq_on=='full')
pulseP2.add(tE, offset=E[1], mark=acq_on=='full')
pulseP2.add(tL, offset=L[1], mark={'full':True, 'read':(0.9, 1)}[acq_on])
pulseP2.addRamp(tR, -read_delta['P2'], +read_delta['P2'], offset=R[1], mark=(0, 0.9))

#compensateAndEqualizeTime(pulseP1, pulseP2, 0.01)

pulseP1.plot(pulseP2, wide='wider', relative_time=True, no_shape_comp=False)
genPWLFile(pulseP2, awg_sr, 'psb_pulse.txt')

acq_time = pulseP1.getMarkDuration(awg_sr) + acq_after_pulse
ats.acquisition_length_sec.set(acq_time)
#ats.sample_rate.set(1000000)

send(pulseP1, 1)
send(pulseP2, 2)
send(pulseP1, 3, run_after=True)

rhP1.ramp.set(read_level['P1'])
rhP2.ramp.set(read_level['P2'])
# # vm
sweep = SweepAxis(np.linspace(read_level[to_sweep]-sweep_delta, read_level[to_sweep]+sweep_delta, sweep_nb),
                  fn_next=set_function[to_sweep], label=to_sweep, enable=True)

def vmget():
    sweep.next()
    data = acquire(acq_time)
    data = ua.gaussian(data, 2) if filt else data
    return data

vm = VideoModeWindow(fn_get=vmget, dim=1,
                      xlabel=f"{x_axis}", ysweep=sweep,
                      axes_dict={'x': [read_level[x_axis]-abs(read_delta[x_axis]),
                                      read_level[x_axis]+abs(read_delta[x_axis])]
                                if x_axis != 'time' and read_delta[x_axis]!=0 else acq_time},
                      fn_xshift=shiftP1 if x_axis != 'time' else None, window_size='wide')


# %% PSB trace x fois
read_level = {'P1': 1.1, 'P2': 0.600}
rhP1.ramp.set(read_level['P1'])
rhP2.ramp.set(read_level['P2'])

count = dict(c=0)
def vmget(count=count):
    count['c']+=1
    print(count)
    return acquire(acq_time)

vm = VideoModeWindow(fn_get=vmget, dim=1, wrap_at=10000,
                      xlabel=f"time (s)", axes_dict={'x':ats.acquisition_length_sec.get()},
                      play=True, pause_after_one=True, take_focus=False, show=False)
# vm = VideoModeWindow(fn_get=lambda: acquire(acq_time), dim=1, wrap_at=5000,
#                       xlabel=f"time (s)", axes_dict={'x':ats.acquisition_length_sec.get()},
#                       play=True, pause_after_one=True, take_focus=False, show=True)
#%%% plot splitting
traces = np.array(vm.data_buffer[0].T)
imshow(traces, save=False, path=LOG_PATH,
       metadata=dict(pulseP1=str(pulseP1), pulseP2=str(pulseP2)),
       x_axis=acq_time,
       filename=f"readout")

#traces = traces[:,200:]

hist, bins = ua.histogramOnEachColumns(traces, bins=100, get_bins=True)
imshow(hist, x_axis=acq_time, y_axis=bins,
       title=f"", x_label='time (s)', x_label2='', cbar=True,
       save=False, path=LOG_PATH, filename=f"transition_31-40", metadata=dict(traces=traces))

#up.plotColumns(hist, interval=10, x_label='bins', y_label='signal', cbar=True, z_label='time')

# %% mesure T1(P1, P2)
nb_trace = 1000
p1_0, p2_0 = 1.10, 0.6

# %%% gen points
points = ua.genTrapezoidSweep(0.550, 0.557, 22, 
                                       1.03, 1.044, 
                                       1.04, 1.054, 11)
pointsz1 = ua.genTrapezoidSweep(0.550, 0.5515, 11, 
                                   1.03, 1.0375, 
                                   1.0325, 1.04, 18)
delta = np.asarray((0.55, 1.03)) - np.asarray((0.55015, 1.03025))
delta = np.abs(delta)
pointsz2 = [(0.55-delta[0], y) for y in np.linspace(1.03-delta[1], 1.0375-delta[1], 18)]
pointsz3 = ua.genTrapezoidSweep(0.550-12*delta[0], 0.5515-12*delta[0], 11, 
                                   1.03-12*delta[1], 1.0375-12*delta[1], 
                                   1.0325-12*delta[1], 1.04-12*delta[1], 18)
offset = -11
pointsz4 = ua.genTrapezoidSweep(0.550-offset*delta[0], 0.5515-offset*delta[0], 11, 
                                   1.03-offset*delta[1], 1.0375-offset*delta[1], 
                                   1.0325-offset*delta[1], 1.04-offset*delta[1], 18)

#mesure T1(Bz)
bz = [.1,.5,.8,1,1.2]
factor = 1.7
detuning = ua.gen2dTraceSweep(0.554, 0.554-factor*0.0005, 1.035, 1.035+factor*0.00375, 6) # .8, 1, 1.2 T
plt.scatter(np.asarray(detuning)[:,0], np.asarray(detuning)[:,1], c=[i for i in range(len(detuning))])

detuning2 = ua.gen2dTraceSweep(0.571, 0.571-factor*0.0005, 1.061, 1.061+factor*0.00375, 6) # .5 T
#p1_0, p2_0 = 1.061, 0.571


detuning3 = ua.gen2dTraceSweep(0.593, 0.593-factor*0.0005, 1.09, 1.09+factor*0.00375, 6) # .1 T
#p1_0, p2_0 = 1.093, 0.592 

all_points =  pointsz1 + pointsz2 + pointsz3 + pointsz4#detuning + detuning2 +detuning3
fig, ax = plt.subplots()
img = imshow(tr_array, ax=ax, x_axis=x_axis, y_axis=y_axis, return_fig=True, cbar=False)
sc = ax.scatter(np.asarray(all_points)[:,0], np.asarray(all_points)[:,1], c=[i for i in range(len(all_points))], cmap='plasma', edgecolor='k', s=100, alpha=0.75)
plt.show()

# Across detuning:
P2_start, P2_stop = 0.601, 0.599
P1_start, P1_stop = 1.094, 1.107
nbpts = 101
points = list(zip(np.linspace(P1_start, P1_stop, nbpts), np.linspace(P2_start, P2_stop, nbpts)))

# t1 zone:

points = ua.gen2dTraceSweepDiag(0.5975, 0.5970, 1.092, 1.098, 7,
                                0.6045, 1.102, 21)
imshow('C:\Codes\Lab-Scripts/Spin/logs/20240906/20240906-164238-transition_', 
       scatter_points=points, scatter_x_id=0, scatter_y_id=1, scatter_c_id=0)

# %%% mesure
sw_points = points[95:]
flbl = 'zone'
for i, (p2, p1) in alive_it(enumerate(sw_points), spinner=None, total=len(sw_points)):
    
    # read center
    R = (0    , -0.000)
    L = (-.013, 0 )
    E = (-.010 , -.005)
    
    tR, tL, tE = 0.20, 0.01, 0.01
    
    newL = lambda p1, p2: np.asarray(L) + (np.asarray((p1_0, p2_0)) - np.asarray((p1, p2)))
    newE = lambda p1, p2: np.asarray(E) + (np.asarray((p1_0, p2_0)) - np.asarray((p1, p2)))
    L = newL(p1, p2)
    E = newE(p1, p2)
    
    tw = 0.015
    acq_on = 'full' # 'full' | 'read'
    acq_after_pulse = 0.2
    ##############
    
    pulseP1 = Pulse(name='P1', shape_comp=True)
    pulseP1.add(tw)
    pulseP1.add(tL, offset=L[0], mark=acq_on=='full')
    pulseP1.add(tE, offset=E[0], mark=acq_on=='full')
    pulseP1.add(tL, offset=L[0], mark={'full':True, 'read':(0.9, 1)}[acq_on])
    pulseP1.add(tR, offset=R[0], mark=(0, 1))
    
    pulseP2 = Pulse(name='P2', shape_comp=True)
    pulseP2.add(tw)
    pulseP2.add(tL, offset=L[1], mark=acq_on=='full')
    pulseP2.add(tE, offset=E[1], mark=acq_on=='full')
    pulseP2.add(tL, offset=L[1], mark={'full':True, 'read':(0.9, 1)}[acq_on])
    pulseP2.add(tR, offset=R[1], mark=(0, 1))
    
    acq_time = pulseP1.getMarkDuration(awg_sr)
    acq_time += acq_after_pulse
    ats.acquisition_length_sec.set(acq_time)
    #ats.sample_rate.set(1000000)
    
    awg_overrange = False
    awg_overrange = send(pulseP1, 1) or awg_overrange
    awg_overrange = send(pulseP2, 2) or awg_overrange
    awg_overrange = send(pulseP1, 3, run_after=True) or awg_overrange

    rhP1.ramp.set(p1)
    rhP2.ramp.set(p2)


    vm = VideoModeWindow(fn_get=lambda: acquire(acq_time), dim=1, wrap_at=nb_trace,
                          xlabel=f"time (s), point {i}/{len(sw_points)} p1:{p1} p2:{p2}", axes_dict={'x':acq_time},
                          play=True, pause_after_one=True, take_focus=True, show=True)
    
    traces = np.array(vm.data_buffer[0].T)

    imshow(traces, save=True, path=LOG_PATH, show=False,
           metadata=dict(pulseP1=str(pulseP1), pulseP2=str(pulseP2), p1=p1, p2=p2, awg_overrange=awg_overrange),
           filename=f"mesureT1_{flbl}_{i}", x_axis=acq_time,
           y_label='count', x_label='time (s)', cbar=False)
        
    wait(0.1)
    vm.close()
    
    
    
# %% mesure T1 apres .8->.1->.8
# la transition 31-40 a beacuoup bougé
tr = uf.loadNpz('C:\Codes\Lab-Scripts/Spin/logs/20240821/20240821-225919-transition_B=800mT_retour')
arr, x_axis, y_axis = tr.get('array'), tr.get('metadata').get('imshow_kwargs').get('x_axis'), tr.get('metadata').get('imshow_kwargs').get('y_axis')
points = ua.genTrapezoidSweep(0.586, 0.593, 51, 
                                       1.08, 1.09, 
                                       1.087, 1.097, 11)

up.scatterOverImg(*points.T, ua.linlen(points), x_axis, y_axis, arr)

nb_trace = 1000 # 2000 then 1500 then 1000
p1_0, p2_0 = 1.09, 0.590


sw_points = points
flbl = 'oneshot'
for i, (p2, p1) in alive_it(enumerate(sw_points), spinner=None, total=len(sw_points)):
    if i < 253: continue # !!!! 2000 -> 1500
    if i < 464: continue # !!!! 1500 -> 1000
    if i < 468: continue # tR 0.01 -> 0.006

    # read center
    R = (0    , -0.000)
    L = (-.015, 0 )
    E = (-.010 , -.005)
    
    tR, tL, tE = 0.008, 0.0005, 0.0008 #  0.05 -> 0.01 -> 0.006
    newL = lambda p1, p2: np.asarray(L) + (np.asarray((p1_0, p2_0)) - np.asarray((p1, p2)))
    newE = lambda p1, p2: np.asarray(E) + (np.asarray((p1_0, p2_0)) - np.asarray((p1, p2)))
    L = newL(p1, p2)
    E = newE(p1, p2)
    
    tw = 0.01 # 0.015 -> 0.01 gagne 1 heure
    acq_on = 'full' # 'full' | 'read'
    ##############
    
    pulseP1 = Pulse(name='P1', shape_comp=True)
    pulseP1.add(tw)
    pulseP1.add(tL, offset=L[0], mark=acq_on=='full')
    pulseP1.add(tE, offset=E[0], mark=acq_on=='full')
    pulseP1.add(tL, offset=L[0], mark={'full':True, 'read':(0.9, 1)}[acq_on])
    pulseP1.add(tR, offset=R[0], mark=(0, 0.9))
    
    pulseP2 = Pulse(name='P2', shape_comp=True)
    pulseP2.add(tw)
    pulseP2.add(tL, offset=L[1], mark=acq_on=='full')
    pulseP2.add(tE, offset=E[1], mark=acq_on=='full')
    pulseP2.add(tL, offset=L[1], mark={'full':True, 'read':(0.9, 1)}[acq_on])
    pulseP2.add(tR, offset=R[1], mark=(0, 0.9))
    
    acq_time = pulseP1.getMarkDuration(awg_sr)
    ats.acquisition_length_sec.set(acq_time)
    #ats.sample_rate.set(1000000)
    
    awg_overrange = False
    awg_overrange = send(pulseP1, 1) or awg_overrange
    awg_overrange = send(pulseP2, 2) or awg_overrange
    awg_overrange = send(pulseP1, 3, run_after=True) or awg_overrange

    rhP1.ramp.set(p1)
    rhP2.ramp.set(p2)


    vm = VideoModeWindow(fn_get=lambda: acquire(acq_time), dim=1, wrap_at=nb_trace,
                          xlabel=f"time (s), point p1:{p1} p2:{p2}", axes_dict={'x':acq_time},
                          play=True, pause_after_one=True, take_focus=True, show=True)
    
    traces = np.array(vm.data_buffer[0].T)

    imshow(traces, save=True, path=LOG_PATH, show=False,
           metadata=dict(pulseP1=str(pulseP1), pulseP2=str(pulseP2), p1=p1, p2=p2, awg_overrange=awg_overrange),
           filename=f"mesureT1_{flbl}_{i}", x_axis=acq_time,
           y_label='count', x_label='time (s)', cbar=False)
        
    wait(0.5)
    vm.close()
    
    
    
