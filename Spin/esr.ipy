# %% init
LAB_SCRIPT_PATH = "/home/local/USHERBROOKE/mora0502/Codes/Lab-Scripts" # ABSOLUTE PATH, without trailing /
LAB_SCRIPT_PATH = "C:\Codes\Lab-Scripts" # ABSOLUTE PATH, without trailing /

%cd $LAB_SCRIPT_PATH
LOG_PATH = r'D:/QBB16_SD11b_3/Spin/'
LOG_PATH_HL = r'D:/QBB16_SD11b_3/Hlab/'

from pyHegel import instruments
from pyHegel.commands import wait

import numpy as np
from tqdm import tqdm

from Utils import analyse as ua
from Utils import files as uf
from Utils import plot as up
from Utils import instruments as ui
from Utils import utils as uu
from Utils import measure as um

from Utils.plot import imshow
from Pulses.Builder import Pulse, genPWLFile, equalizeTime
import Pulses.ABCDE

from Videomode.VideoModeWindow import VideoModeWindow, SweepAxis

# %% setup

awg = instruments.tektronix.tektronix_AWG('USB0::0x0699::0x0503::B030793::0')
gain = awg.gain = 1/(0.02512)*0.4
awg_sr = 10e4
channel = {'P1':1, 'P2':2}
send = lambda pulse, ch, awg_sr=awg_sr, run_after=False: ui.sendSeqToAWG(awg, pulse, channel=ch, run_after=run_after, awg_sr=awg_sr, pad='last')
awg.write('SOURce1:RMODe TRIGgered'); awg.write('SOURce1:TINPut BTrigger')
awg.write('SOURce2:RMODe TRIGgered'); awg.write('SOURce2:TINPut BTrigger')
awg.write('SOURce3:RMODe TRIGgered'); awg.write('SOURce3:TINPut BTrigger')
awg.write('SOURce1:DAC:RESolution 15') # 15 bits + 1 marker
awg.write('SOURce2:DAC:RESolution 15')
awg.write('SOURce3:DAC:RESolution 15')
# debug: awg.clear()

ats = instruments.ATSBoard(systemId=1, cardId=1)
ats.conf = lambda: {'sr':ats.sample_rate.get(), 'pts':ats.samples_per_record.get(), 't':ats.acquisition_length_sec.get()}
ats.active_channels.set(['A','B'])
#ats.sample_rate.set(1_000_000)
ats.sample_rate.set(20_000)
ats.trigger_level_1.set(1000)
ats.ConfigureBoard()
ats.nbwindows.set(1)
ats.trigger_delay.set(0)
def acquire(acq_time):
    ats.run_and_wait()
    awg.write('TRIGger BTRigger')
    wait(acq_time)
    data = ats.fetch.get()[2]
    return data

rhP1 = bi3 = instruments.iTest_be2102("TCPIP::192.168.150.112::5025::SOCKET", slot=3)
rhP2 = bi1 = instruments.iTest_be2102("TCPIP::192.168.150.112::5025::SOCKET", slot=1)
def shiftP1(val): rhP1.ramp.set(rhP1.get()+val)
def shiftP2(val): rhP2.ramp.set(rhP2.get()+val)
set_function = {'P1': rhP1.ramp.set, 'P2': rhP2.ramp.set}
shift_function = {'P1': shiftP1, 'P2': shiftP2}

psg = instruments.agilent_rf_PSG('GPIB1::19::INSTR')

awg2 = instruments.agilent_rf_33522A('USB0::2391::8967::MY50000526::0::INSTR')
awg2.current_ch.set(1)
awg2.mode.set('PULSe')
awg2.ampl.set(1)
awg2.offset.set(0.5)
awg2.write('SOURce1:BURSt:MODE TRIGgered')
awg2.write('SOURce1:BURSt:NCYCles 1')
awg2.freq.set(1e3)
awg2.out_en.set(True)     

# %% pulse  A - B - C - D
##### settings
#   (P1  ,  P2)
detuning_slope = -1/8

p1_40 = 0.04
p1_read = 0
p1_31 =  -0.01

_init = (0, 0)
_read = (p1_read , p1_read*detuning_slope)
_31 = (p1_31, p1_31*detuning_slope )
_40 = (p1_40, p1_40*detuning_slope )

A, tA = _40, 0.000_001
B, tB = _31, 0.000_1
C, tC = _read, 0.03
D, tD = _31, 0.00
E, tE = _read, 0.00

tinit = 0.05 # min around 0.015

trampAB = 0.000_0
trampBC = 0.001_1
trampCD = 0.00
trampDE = 0.00

tdrive = 0.000_0


pulseP1, pulseP2 = Pulses.ABCDE.genABCDE([A,B,C,D,E], [tA,tB,tC,tE,tD], [trampAB,trampBC,trampCD,trampDE], tinit=tinit)
# vm
base_level = {'P1': 1.195, 'P2': 0.657}
filt = 2 # gaussian filter

##############
# pulseSR = Pulse(name='SR', shape_comp=False)
# pulseSR.add(tinit)
# pulseSR.add(tA)
# pulseSR.add(trampAB)
# pulseSR.add(tB/2-tdrive/2)
# pulseSR.addRamp(tdrive, -.75/gain, +.75/gain, mark=True)
# pulseSR.add(tB/2-tdrive/2)
# pulseSR.add(trampBC)
# pulseSR.add(tC)
# pulseSR.add(trampCD)
# pulseSR.add(tD)
# pulseSR.add(trampDE)
# pulseSR.add(tE)

#pulseP2.plot(pulseP1)

pulseP1.plot(pulseP2, wide='wider', relative_time=False, no_shape_comp=True)
points = [(0, x+base_level['P1'],y+base_level['P2']) for x,y in [A, B, C, D, E]]
points += [(1, base_level['P1'],base_level['P2'])]
imshow('D:/QBB16_SD11b_3/Hlab/20241030/20241030-102715-transition_psb', scatter_points=points, scatter_points_label='id')
genPWLFile(pulseP1, awg_sr, 'psb_pulse.txt')

#%%% vm
acq_time = pulseP1.getMarkDuration(awg_sr)
ats.acquisition_length_sec.set(acq_time)
ats.nbwindows.set(1)

ui.awgBTrigMode(awg)
send(pulseP1, 1)
send(pulseP2, 2, run_after=True)
#send(pulseSR, 3, run_after=True)
 
rhP1.ramp.set(base_level['P1'])
rhP2.ramp.set(base_level['P2'])

def vmget():
    data = acquire(acq_time)
    data = ua.gaussian(data, filt) if filt else data
    return data

vm = VideoModeWindow(fn_get=vmget, dim=1, wrap_at=500,xlabel="time",axes_dict={'x': acq_time})
#vm = VideoModeWindow(fn_get=vmget, dim=1, ysweep=sweep,xlabel="time",axes_dict={'x': acq_time})
#img = vm.data_buffer[0].T
#up.imshow(img, x_label='time', y_label='count', x_axis=acq_time, cbar=False, title='vm pulse', filename='pulse_sequence', save=1,path=LOG_PATH_HL)



# %% sweep temps de rampe A-B

meas = um.Measure(LOG_PATH, '20-11_trampBC', metadata=
                  dict(champs=.2, base_level = {'P1': 1.195, 'P2': 0.657}, tr='D:/QBB16_SD11b_3/Hlab/20241030/20241030-102715-transition_psb'))

BC_ramps = np.linspace(0,0.010_0, 501)
for trampBC in tqdm(BC_ramps):
    pulseP1, pulseP2 = Pulses.ABCDE.genABCDE([A,B,C,D,E], [tA,tB,tC,tE,tD], [trampAB,trampBC,trampCD,trampDE], tinit=tinit)

    acq_time = pulseP1.getMarkDuration(awg_sr)
    ats.acquisition_length_sec.set(acq_time)

    send(pulseP1, 1)
    send(pulseP2, 2, run_after=True)
    
    vm = VideoModeWindow(fn_get=vmget, dim=1, wrap_at=1000, xlabel="time",axes_dict={'x': acq_time}, play=True, take_focus=True)
    img = vm.data_buffer[0].T
    
    meas.saveArray(img, metadata=dict(x_axis=acq_time, trampBC=trampBC, pulseP1=pulseP1, pulseP2=pulseP2))
    
    vm.close()
# vm


#%% vm
acq_time = pulseP1.getMarkDuration(awg_sr)
ats.acquisition_length_sec.set(acq_time)
ats.nbwindows.set(1)

ui.awgBTrigMode(awg)
send(pulseP1, 1)
send(pulseP2, 2)
send(pulseSR, 3, run_after=True)
 
rhP1.ramp.set(base_level['P1'])
rhP2.ramp.set(base_level['P2'])

def vmget():
    data = acquire(acq_time)
    data = ua.gaussian(data, filt) if filt else data
    return data

vm = VideoModeWindow(fn_get=vmget, dim=1, wrap_at=500,xlabel="time",axes_dict={'x': acq_time})
#vm = VideoModeWindow(fn_get=vmget, dim=1, ysweep=sweep,xlabel="time",axes_dict={'x': acq_time})
#img = vm.data_buffer[0].T
#up.imshow(img, x_label='time', y_label='count', x_axis=acq_time, cbar=False, title='vm pulse', filename='pulse_sequence', save=1,path=LOG_PATH_HL)



# %% pulse multi sequence
nb_pulse = 600
ui.awgContMode(awg)
ats.sample_rate.set(50_000)
ats.nbwindows.set(nb_pulse)
ats.ConfigureBoard()
####

ats.acquisition_length_sec.set(acq_time)

def get(nb=1):
    nb_pulse=ats.nbwindows.get()
    acq = None
    awg.run(True)
    
    for _ in range(nb):
        data = ats.fetch_all.get()
        data = data[2].reshape((nb_pulse,-1))
        if acq is None:
            acq = data
        else: 
            acq = np.concatenate((acq, data))
    
    awg.run(False)
    return acq


# %% sweep freq
# 48 000 traces par heure

#timelist = np.linspace(0.1e-6, 20.0e-6, 200)
freqs = ua.arange(15e9, 19e9, 12e6, True); print(len(freqs))
#freqs = list(ua.arange(14e9, 15.1e9, 12e6, True)) + list(ua.arange(17.8e9, 19e9, 12e6, True))
#freqs = np.linspace(16.470e9, 16.51e9, 11); print(len(freqs))

points = freqs


name = '31r31r_nuit2'
nb_get = 1
ampl = -15
champs = 0.589
tdrive = 0.000_4
chirp = 32e6
description = """"""



########
meas = um.Measure(LOG_PATH, name, metadata=
                  dict(nb_traces=nb_get, tdrive=tdrive, chirp=chirp,
                       ampl=ampl, description=description,
                       champs=champs, acq_len=ats.acquisition_length_sec.get()))
psg.rf_en.set(True)
psg.mod_fm_en.set(True) # !!! always True, even when no chirp: needed for trigger.
psg.ampl.set(ampl)
psg.write('FM1:DEViation {freq_deviation}'.format(freq_deviation=chirp))
awg2.pulse_width.set(tdrive)
 
for i, f in tqdm(enumerate(points), total=(len(points))):
    
    #awg2.pulse_width.set(tdrive)
        
    psg.freq_cw.set(f)
    acq = get(nb_get)
    
    meas.saveArray(acq, metadata=dict(x_axis=acq_time, freq=f))
    vm.close()

# %% sweep power
# 48 000 traces par heure

powers = ua.arange(-20, -5, .2, True); print(len(powers))
#freqs = list(ua.arange(14e9, 15.1e9, 12e6, True)) + list(ua.arange(17.8e9, 19e9, 12e6, True))
#freqs = np.linspace(16.470e9, 16.51e9, 11); print(len(freqs))

points = powers


name = '31r31r_power1'
freq = 18.135e9
nb_get = 1
champs = 0.589
tdrive = 0.000_4
chirp = 1e6
description = """"""



########
meas = um.Measure(LOG_PATH, name, metadata=
                  dict(nb_traces=nb_get, tdrive=tdrive, chirp=chirp,
                       ampl=ampl, description=description, freq=freq,
                       champs=champs, acq_len=ats.acquisition_length_sec.get()))
psg.rf_en.set(True)
psg.mod_fm_en.set(True) # !!! always True, even when no chirp: needed for trigger.
psg.freq_cw.set(freq)
psg.write('FM1:DEViation {freq_deviation}'.format(freq_deviation=chirp))
awg2.pulse_width.set(tdrive)
 
for i, p in tqdm(enumerate(points), total=(len(points))):
    
    #awg2.pulse_width.set(tdrive)
        
    #psg.freq_cw.set(f)
    psg.ampl.set(p)
    
    acq = get(nb_get)
    
    meas.saveArray(acq, metadata=dict(x_axis=acq_time, power=p))
    vm.close()


    
    
# %% boucle sweep

# 48 000 traces par heure
power = [-8,-7,-6,-9]
names = ['b005_nuit_p'+str(abs(p)) for p in power]

for i in range(len(power)):
#timelist = np.linspace(0.1e-6, 20.0e-6, 200)
#freqs = np.linspace(16.485e9, 16.5e9, 201); print(len(freqs))
    freqs = ua.arange(15.8e9, 17.1e9, 6e6); print(len(freqs))

    points = freqs


    name = names[i]
    nb_get = 1 # *600
    ampl = power[i]
    champs = 0.590
    tdrive = 0.000_4
    chirp = 16e6
    description = """"""



########
    meas = um.Measure(LOG_PATH, name, metadata=
                      dict(nb_traces=nb_get, tdrive=tdrive, chirp=chirp,
                           ampl=ampl, description=description,
                           champs=champs, acq_len=ats.acquisition_length_sec.get()))


    psg.rf_en.set(True)
    psg.mod_fm_en.set(True)
    psg.ampl.set(ampl)
    psg.write('FM1:DEViation {freq_deviation}'.format(freq_deviation=chirp))
    awg2.pulse_width.set(tdrive)
    
    for i, f in tqdm(enumerate(points), total=(len(points))):
    
        #awg2.pulse_width.set(tdrive)
        
        psg.freq_cw.set(f)

        acq = get(nb_get)
    
        meas.saveArray(acq, metadata=dict(x_axis=acq_time, freq=f))
        vm.close()
    
# %% RABII sweep
# 48 000 traces par heure

points = np.linspace(50e-9, 5e-6, 501); print(len(points))


name = 'b2_45m_rabi'
nb_get = 1
ampl = -8
champs = 0.590
chirp = 0e6
freq = 17.3908e9
description = """check si pic, else: retune psb en minimisant la stat à 0"""



########
meas = um.Measure(LOG_PATH, name, metadata=
                  dict(nb_traces=nb_get, chirp=chirp,
                       ampl=ampl, description=description,
                       champs=champs, acq_len=ats.acquisition_length_sec.get(), freq=freq))
psg.rf_en.set(True)
psg.mod_fm_en.set(True) # !!! always True, even when no chirp: needed for trigger.
psg.ampl.set(ampl)
psg.write('FM1:DEViation {freq_deviation}'.format(freq_deviation=chirp))
psg.freq_cw.set(freq)
 
for i, td in tqdm(enumerate(points), total=(len(points))):
    
    awg2.pulse_width.set(td)
    acq = get(nb_get)
    
    meas.saveArray(acq, metadata=dict(x_axis=acq_time, tdrive=td))
    vm.close()

