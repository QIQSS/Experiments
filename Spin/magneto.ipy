# %% 
import platform
LS_PATH, LOG_PATH = \
            {'windows':['C:/Codes/Lab-Scripts', 
                  '//bob.physique.usherbrooke.ca/recherche/Dupont-Ferrier/Projets/IMEC_DD_reflecto/QBB16_SD11b_3/'],
             'linux':['/home/local/USHERBROOKE/mora0502/Codes/Lab-Scripts',
                  '/run/user/1338691803/gvfs/smb-share:server=bob.physique.usherbrooke.ca,share=recherche/Dupont-Ferrier/Projets/IMEC_DD_reflecto/QBB16_SD11b_3/']}\
            [platform.system().lower()]
%cd $LS_PATH

from Utils import analyse as ua
from Utils import files as uf
from Utils import plot as up
from Utils import utils as uu
from Utils import measure as um

from Utils.plot import imshow, qplot
from tqdm import tqdm
from icecream import ic

from pyHegel import fitting as fit
import pyHegel.commands as c
import numpy as np
from matplotlib import pyplot as plt
import matplotlib

from pyHegel import instruments

# %% map P1 B1
dict_file = uf.readfileNdim(LOG_PATH + '/Hlab/20241021/113941_B1_P1.txt')
set_low = uf.readfileNdim(LOG_PATH + '/Hlab/20241021/145605_ST_low_sensitivity.txt')
p1_low, b1_low = 1.7, 0.3
set_high = uf.readfileNdim(LOG_PATH + '/Hlab/20241021/145823_ST_high_sensitivity.txt')
p1_high, b1_high = 2.7, 0.8
# %%%
p1_b1 = ua.alternate(dict_file['zurich_UHF.readval.ch0_r'])
p1, b1 = dict_file['P1.ramp'][0], dict_file['bilt_9._B1'][:,1]
imshow(p1_b1, x_axis=p1, y_axis=b1, x_label='P1 (V)', y_label='B1 (V)')
trace1 = p1_b1[25]

# %%%
#trace = ua.filter_frequencies(trace, p1, [0.2, 0.5, 1], show_plot=False)
plt.plot(-trace1+np.mean(trace1))
trace = -trace1
peaks = ua.findPeaks(trace, prominence=0.0001)

trace = np.diff(trace)
plt.plot(trace)

# %%% set
set_vals = set_low['bilt_7._ST']
low, high = set_low['zurich_UHF.readval.ch0_r'], set_high['zurich_UHF.readval.ch0_r']
plt.plot(set_vals, low, label='low sensitivity')
plt.plot(set_vals, high, label='high sensitivity')
plt.axvline(2.987, color='grey', linestyle='--')
inters = ua.getValue(set_vals, high, 2.987)
plt.axhline(inters, color='grey', linestyle='--')

inters_at_low = set_vals[len(low)//2+ua.findNearest(low[len(low)//2:], inters,'id')]
plt.axvline(inters_at_low, color='grey', linestyle='--')
#plt.text(3, 0.01, f"{inters_at_low:.5f}")

plt.legend(fontsize='large')
plt.xlabel('ST (V)')


# %% mesure
p1_vals = np.linspace(0.3, 3.6, 3301)
b1_vals = 0.2*(p1_vals-0.3) + 0.4
st_vals = -0.0078*(p1_vals-1.45) + 2.989
bz_vals = np.linspace(0, 5, 101)

plt.figure()
plt.plot(p1_vals,label='p1')
plt.plot(b1_vals,label='b1')
plt.plot(st_vals,label='st')
plt.legend()

# %%% instruments
dmm = instruments.agilent_multi_34410A("USB0::0x2A8D::0x0101::MY57515472::INSTR")
readval = dmm.readval
readval = instruments.ScalingDevice(readval, scale_factor=10000000.0, only_val=True, invert_trans=True)
bilt_9 = instruments.iTest_be214x("TCPIP::192.168.150.112::5025::SOCKET", slot=9)
B1_en = (bilt_9.output_en, {'ch': 2})
B1 = (bilt_9.ramp, {'ch': 2})
B1 = instruments.LimitDevice(B1, min=-3.0, max=3.0)
B2_en = (bilt_9.output_en, {'ch': 4})
B2 = (bilt_9.ramp, {'ch': 4})
B2 = instruments.LimitDevice(B1, min=-3.0, max=3.0)
bilt_7 = instruments.iTest_be214x("TCPIP::192.168.150.112::5025::SOCKET", slot=7)
ST_en = (bilt_7.output_en, {'ch': 1})
ST = (bilt_7.ramp, {'ch': 1})
ST = instruments.LimitDevice(ST, min=-4.0, max=4.0)
magnet_z = instruments.AmericanMagnetics_model430("tcpip::192.168.137.214::7180::socket")
field_z = magnet_z.ramp_field_T
rhP1 = instruments.iTest_be2102("TCPIP::192.168.150.112::5025::SOCKET", slot=3)
P1_en = rhP1.output_en
P1 = rhP1.ramp
rhP2 = instruments.iTest_be2102("TCPIP::192.168.150.112::5025::SOCKET", slot=1)
P2_en = rhP2.output_en
P2 = rhP2.ramp

# %%%p1 b1
a = uf.loadNpz('D:/QBB16_SD11b_3/Spin/20241021-174255-magneto/20241023/20241023-102022-B1_P1.npz')
imshow(a.array, y_slice=(0,46))
# %%% start

meas = um.Measure(r"D:/QBB16_SD11b_3/Spin/", 'magneto', metadata=dict(p1_vals=p1_vals, b1_vals=b1_vals, st_vals=st_vals, bz_vals=bz_vals))

for i, b in tqdm(enumerate(bz_vals), total=len(bz_vals)):
    if i < 56: continue
    #print(i,b)
    field_z.set(b)
    res = np.empty(len(p1_vals))
    
    for j, (p1, b1, st) in tqdm(enumerate(zip(p1_vals, b1_vals, st_vals)),total = len(p1_vals)):
        #print(j,p1,b1,st)
        P1.set(p1)
        B1.set(b1)
        ST.set(st)
        
        res[j] = readval.get()
        
    meas.saveArray(res, metadata=dict(bz=b))

# 56, 57, 58, 59, 60, 61: SET shift -> redo

# %%% plot test
p = "D:/QBB16_SD11b_3/Spin//20241021-174255-magneto/20241021-180017-magneto_0"
npzdict = uf.loadNpz(p)
plt.plot(npzdict.array)
trace = npzdict.array
# %%%
plt.plot(trace-np.mean(trace))
plt.plot(ua.lfilter(np.diff(trace), 0))
plt.plot(ua.lfilter(np.diff(trace), 1))

meas_file, point_files = um.Measure.getFiles(r"D:/QBB16_SD11b_3/Spin/", 'magneto')
[qplot(f) for f in point_files[50:]]

#plt.plot(trace)
#plt.plot(ua.lfilter(trace, 3))

# %%%
file = point_files[56]
npzdict = uf.loadNpz(file)

# %% ANALYSE
# %%% one file
file = '/run/user/1338691803/gvfs/smb-share:server=bob.physique.usherbrooke.ca,share=recherche/Dupont-Ferrier/Student/Alexis/_tmp/20241022-221259-magneto_97.npz'
file1 = r'D:\QBB16_SD11b_3\Spin\20241021-174255-magneto/20241021-180017-magneto_0.npz'
file2 = r'D:\QBB16_SD11b_3\Spin\20241021-174255-magneto/20241023-003141-magneto_105.npz'
npz1 = uf.loadNpz(file1)
npz2 = uf.loadNpz(file2)

# %%%%
arr1, bz1 = npz1.array, npz1.rget('bz')
arr2, bz2 = npz2.array, npz2.rget('bz')
qplot(arr1)
qplot(arr2)

# %%%%
diff = ua.lfilter(np.diff(ua.lfilter(arr1,10)), 20) 

#seg1, seg2 = diff[250:2600], diff[2600:]
slice_seg = slice(250,1500)
seg1, seg2 = diff[slice_seg], diff[slice_seg.stop:]

peaks_id1, prominence1 = ua.findPeaks(seg1, prominence=0.45e-10, show_plot=True)
peaks_id2, prominence2 = ua.findPeaks(seg2, prominence=0.05e-10, show_plot=True)

peaks_ids = np.concatenate((peaks_id1+slice_seg.start, peaks_id2+slice_seg.stop)) - 10
qplot(arr1, vline=peaks_ids)


# %%%% plot
p1_vals = np.linspace(0.3, 3.6, 3301)
b1_vals = 0.2 * (p1_vals - 0.3) + 0.4
fig, ax1 = plt.subplots()

ax1.plot(p1_vals, arr1)
ax1.set_xlabel('P1 (V)')
ax1.set_ylabel('I_SET')
ax1.grid()

ax2 = ax1.twiny()  # Create a twin axis sharing the same y-axis
ax2.set_frame_on(True)
ax2.patch.set_visible(False)
ax2.xaxis.set_label_position('bottom')
ax2.xaxis.set_ticks_position('bottom')
ax2.spines['bottom'].set_position(('outward', 50))
ax2.plot(b1_vals, arr1, alpha=0)  # Plot invisible data to align the axes
ax2.set_xlabel('B1 (V)')

for i, p in enumerate(peaks_ids):
    x = p1_vals[p]
    ax1.axvline(x=x, linestyle=':', color='red')
    ax1.text(x, np.min(arr1), f'{i+1} electron', rotation=90, verticalalignment='bottom')

plt.show()

# %%% every file
# %%%% load
map_trace = np.full((101,3301),np.nan, dtype=float)
fields = np.empty(101)

meas, points = um.Measure.getFiles(r"D:/QBB16_SD11b_3/Spin/", 'magneto')


for i, f in enumerate(points):
    npz = uf.loadNpz(f)
    fields[i] = npz.rget('bz')
    map_trace[i] = npz.array
# %%%% plot
imshow(map_trace, x_axis=p1_vals, x_axis2=b1_vals, x_label='P1 (V)', x_label2='B1 (V)', y_axis=bz_vals, y_label='Bz (T)',cbar_label='I_SET')
# %%%%

result = np.full((101,31),np.nan, dtype=float)

def analyse(trace, type_=1, text=''):
    
    diff = ua.lfilter(np.diff(ua.lfilter(trace,10)), 20)
    diff = -diff if type_==2 else diff

    slice_seg = {1: slice(250,1500), 2: slice(250, 2000)}[type_]

    seg1, seg2 = diff[slice_seg], diff[slice_seg.stop:]
    prom1, prom2 = {1: (0.45e-10, 0.05e-10), 2: (0.17e-10, 0.05e-10)}[type_]

    peaks_id1, prominence1 = ua.findPeaks(seg1, prominence=prom1, show_plot=False)
    peaks_id2, prominence2 = ua.findPeaks(seg2, prominence=prom2, show_plot=False)

    peaks_ids = np.concatenate((peaks_id1+slice_seg.start, peaks_id2+slice_seg.stop)) - 10
    qplot(trace, vline=peaks_ids, text=text+ f' nb:{len(peaks_ids)}')
    return peaks_ids


for i, t in enumerate(map_trace[:]):
    type_ = 1 if i < 56 else 2
    peaks_ids = analyse(t, type_, text=str(i))
    #result[i] = peaks_ids

# %%%% by hand
# %%%%%
d = {i:[] for i in range(101)}
# %%%%%
i =100
trace, type_ = map_trace[i], 2
diff = ua.lfilter(np.diff(ua.lfilter(trace,10)), 20)
diff = -diff if type_==2 else diff

slice_seg = {1: slice(250,1500), 2: slice(250, 2000)}[type_]
end_seg = {1: None, 2:-400}[type_]

seg1, seg2 = diff[slice_seg], diff[slice_seg.stop:end_seg]
prom1, prom2 = {1: (0.50e-10, 0.08e-10), 2: (0.17e-10, 0.05e-10)}[type_]
prom1, prom2 = {1: (1.6e-11, 0.08e-10), 2: (0.17e-10, 0.05e-10)}[type_]

peaks_id1, prominence1 = ua.findPeaks(seg1, prominence=prom1, show_plot=True)
#peaks_id1 = ua.removeId(peaks_id1,1)

seg2 = np.concatenate((seg2, [min(seg2)]*5))
peaks_id2, prominence2 = ua.findPeaks(seg2, prominence=prom2, show_plot=True)

peaks_ids = np.concatenate((peaks_id1+slice_seg.start, peaks_id2+slice_seg.stop)) - 10
qplot(trace, vline=peaks_ids[:], text=f'nb:{len(peaks_ids)}')

d[i] = peaks_ids[:] # 
#'D:/QBB16_SD11b_3/Spin/20241023/20241023-151217-magneto_positions.npz'
# 0: 31 peaks
# 30: 33 peaks
# 34: 32 peaks
# %%%%%
qplot([ua.lfilter(t,5) for t in map_trace[:]],x_axis=p1_vals, multi=True,linestyle='',marker='.',vline=ua.multiget(p1_vals,peaks_ids))
# %%%%%
plt.figure()
for i, t in d.items():
    plt.plot(t, marker='.', linestyle='')
plt.grid()
# %%%%% cleanup, dict per transition
expected_ranges = [[350,425], [425,500], [500,575], (600,700),(700,800), (850,900),(950,1000), (1025, 1100),(1100,1200),
          [1200,1300], [1300,1400], [1400, 1450], (1450, 1550), (1550,1650), (1650, 1750), (1750,1825), (1825,1900),
          [1900,2000], (2000,2100), (2200,2250), (2275,2350), (2375, 2450), (2450, 2550), (2550, 2600), (2625,2700),
          (2700,2800), (2800,2875), (2900,2950), (3000,3050), (3050,3150), (3150,3250), (3250, 3300), (3300, 5000)]

d2 = {}
for transition_id, range_ in enumerate(expected_ranges):
    
    positions = [] # [(bz_id, position), ...]
    
    for trace_id, transition_position_ids in d.items():
        
        for i, id_ in enumerate(transition_position_ids):
            
            if id_ > range_[0] and id_ < range_[1]:
                positions.append((trace_id,id_))
                break
        continue
    
    positions = np.array(positions)
    d2[transition_id] = positions
d2.pop(32, None)
# remove 1, 2 and shift everything
d2.pop(1,None)
d2.pop(2,None)
for i in range(3,32):
    d2[i-2] = d2[i]
# %%%%%
plt.figure()
for i in range(32):
    plt.plot(ua.multiget(bz_vals, d2[i][:,0]), ua.multiget(p1_vals, d2[i][:,1]), marker='.', linestyle='')
plt.grid()
# %%%%% delta
plt.figure()

for i in range(0, 16):
    delta = d2[i + 1][:, 1] - d2[i][:, 1]
    y_values = ua.multiget(p1_vals, delta)
    y_values = y_values - y_values[0] + i / 32
    y_values *= 1e3
    
    x_values = ua.multiget(bz_vals, d2[i][:, 0])
    
    plt.plot(x_values, ua.gaussian(y_values,1), marker='.', linestyle='', label=f'{i}->{i + 1}')
    
    coefficients = np.polyfit(x_values, y_values, 1)
    fit_line = np.polyval(coefficients, x_values)

    plt.plot(x_values, fit_line, linestyle='-', color='grey', alpha=0.5)
    
    slope = coefficients[0]
    plt.annotate(f'Slope: {slope:.3f}, {i}->{i + 1}', 
                 xy=(x_values[-1], fit_line[-1]), 
                 xytext=(x_values[-1], fit_line[-1]),
                 fontsize=8)

plt.xlabel('Bz (T)')
plt.ylabel('E add (mV)')
plt.grid()
plt.show()




# %% REMESURE avec patchs

# %%% trace p1
#P2.set(1.2), B2.set(1.2), B1.set(0.3)

p1_vals = np.linspace(.6, 2, 601)
st_vals = -0.0078*(p1_vals-0.73) + 2.978

res = np.empty(len(p1_vals))

for i, (p1,st) in tqdm(enumerate(zip(p1_vals,st_vals)), total=len(p1_vals)):
    P1.set(p1)
    ST.set(st)
    res[i] = readval.get()

qplot(res, x_axis=p1_vals)
uf.saveToNpz(r"D:/QBB16_SD11b_3/Spin/", "P1_trace_0T", res)

# %%% transitions positions 0T
trace = uf.loadNpz('D:/QBB16_SD11b_3/Spin/20241025/20241025-165009-P1_trace_0T.npz').array

diff = ua.lfilter(np.diff(ua.lfilter(trace,2)), 0) 
peaks_id, stats = ua.findPeaks(diff, prominence=1e-10, show_plot=True)

qplot(trace, x_axis=p1_vals)

# %%% prepa

p1_vals = np.linspace(.6, 2, 601)
st_vals = -0.0078*(p1_vals-0.73) + 2.978

patch_delta, patch_nbpts = 0.06, 201
initial_positions = [0.729, 0.881, 1.002, 1.11, 1.231, 1.339, 1.441, 1.545, 1.646, 1.750, 1.852, 1.949]
patches_p1 = [np.linspace(pos-patch_delta, pos+patch_delta, patch_nbpts) for pos in initial_positions]
patches_st = [-0.0078*(p1_vals-0.35) + 2.978 for p1_vals in patches_p1]

bz_vals = np.linspace(0, 4.9, 151)

# %%% start 

magnet_z.ramp_wait_after.set(120)
meas = um.Measure(r"D:/QBB16_SD11b_3/Spin/", 'magneto2', metadata=dict(patches_p1=patches_p1, patches_st=patches_st, initial_positions=initial_positions))


for i, b in tqdm(enumerate(bz_vals), total=len(bz_vals)):
    print(f"nb: {i}, fieldz: {b}")
    
    field_z.set(b)
    res = np.empty((len(patches_p1), patch_nbpts))
    
    for patch_num, (patch_p1, patch_st) in enumerate(zip(patches_p1, patches_st)):
        print(f"Patch: {patch_num}")
        
        for i, (p1_val, st_val) in enumerate(zip(patch_p1, patch_st)):
            #print(f"set val: {p1_val}")
            P1.set(p1_val)
            ST.set(st_val)
            
            res[patch_num, i] = readval.get()
        
    meas.saveArray(res, metadata=dict(bz=b))


# %% ANALYSE 2

# %%% load
map_trace = np.full((151,12*201), np.nan, dtype=float)
traces = np.full((151, 12, 201), np.nan, dtype=float)
fields = np.empty(151)
trans_positions = np.full((12, 151), np.nan, dtype=float)

meas, points = um.Measure.getFiles(f"{LOG_PATH}/Spin", 'magneto2')


for i, f in enumerate(points):
    npz = uf.loadNpz(f)
    fields[i] = npz.rget('bz')
    map_trace[i] = npz.array.flatten()
    traces[i] = npz.array
imshow(map_trace, x_axis = p1_vals, x_label='P1 (V)', y_axis=bz_vals, y_label='Bz (T)')

# %%% first trans
plt.figure()
to_plot = [ua.lfilter(-np.diff(traces[i,0]),15) for i in range(len(traces))]
vlines = [ua.findPeaks(trace,0.8e-10)[0] for trace in to_plot]
vlines = [vl[0] if len(vl) == 1 else np.nan for vl in vlines]

_ = [plt.plot(trace) for trace in to_plot]
_ = [plt.vlines(v, np.min(np.array(to_plot)), np.max(np.array(to_plot))) for v in vlines if len(v) >= 1]

trans_pos = ua.multiget(p1_vals, vlines)
trans_positions[0] = trans_pos

# %%% all others
for trans_id in [range(12)]:
    #to_plot = [traces[i, trans_id] for i in range(len(traces))]
    to_plot = [ua.lfilter(-np.diff(traces[i,trans_id]),15) for i in range(len(traces))]
    vlines = [ua.findPeaks(trace,0.6e-10)[0] for trace in to_plot]
    vlines = [vl[0] if len(vl) == 1 else np.nan for vl in vlines]
    

    trans_pos = ua.multiget(p1_vals, vlines)
    trans_positions[trans_id] = trans_pos

    plt.figure()
    _ = [plt.plot(traces[i, trans_id]) for i in range(len(traces))]
    _ = [plt.vlines(v, np.min(np.array(to_plot)), np.max(np.array(to_plot))) for v in vlines]

# %%% plot
plt.figure()
_ = [plt.plot(bz_vals, trans_positions[i], linestyle='', marker='o',label=i) for i in range(len(trans_positions))]
plt.legend()
# %%% fit and plot
fits = []
fit_lines = []
plt.figure()
for i in range(len(trans_positions)):
    valid_indices = ~np.isnan(trans_positions[i])
    filtered_bz_vals = bz_vals[valid_indices]
    filtered_trans_positions = trans_positions[i][valid_indices]
    
    fit_params = np.polyfit(filtered_bz_vals, filtered_trans_positions, 1)
    fits.append(fit_params)     
    fit_line = np.polyval(fit_params, bz_vals)
    fit_lines.append(fit_line)
   
    
    
    color = plt.gca()._get_lines.get_next_color()
    plt.plot(bz_vals, fit_line * i/32, linestyle='-', marker='', color=color)
    plt.plot(bz_vals, trans_positions[i] * i/32, linestyle='', marker='o', color=color)
   
    plt.annotate(f'Slope: {slope:.3f}, {i}->{i + 1}', 
                 xy=(x_values[-1], fit_line[-1]), 
                 xytext=(x_values[-1], fit_line[-1]),
                 fontsize=8)
    
# %%% delta then plot
plt.figure()

for i in range(len(fit_lines)-1):
    delta = fit_lines[i+1] - fit_lines[i]
    plt.plot(bz_vals, delta + i / 32, label=i)

plt.legend()
    




for i in range(0, 16):
    delta = d2[i + 1][:, 1] - d2[i][:, 1]
    y_values = ua.multiget(p1_vals, delta)
    y_values = y_values - y_values[0] + i / 32
    y_values *= 1e3
    
    x_values = ua.multiget(bz_vals, d2[i][:, 0])
    
    plt.plot(x_values, ua.gaussian(y_values,1), marker='.', linestyle='', label=f'{i}->{i + 1}')
    
    coefficients = np.polyfit(x_values, y_values, 1)
    fit_line = np.polyval(coefficients, x_values)

    plt.plot(x_values, fit_line, linestyle='-', color='grey', alpha=0.5)
    
    slope = coefficients[0]
    plt.annotate(f'Slope: {slope:.3f}, {i}->{i + 1}', 
                 xy=(x_values[-1], fit_line[-1]), 
                 xytext=(x_values[-1], fit_line[-1]),
                 fontsize=8)

plt.xlabel('Bz (T)')
plt.ylabel('E add (mV)')
plt.grid()
plt.show()


# %% ANALYSE 3 (2 redo)
# %%% load
traces = np.full((151, 12, 201), np.nan, dtype=float)

p1_vals = np.linspace(.6, 2, 601)
st_vals = -0.0078*(p1_vals-0.73) + 2.978

patch_delta, patch_nbpts = 0.06, 201
initial_positions = [0.729, 0.881, 1.002, 1.11, 1.231, 1.339, 1.441, 1.545, 1.646, 1.750, 1.852, 1.949]
patches_p1 = [np.linspace(pos-patch_delta, pos+patch_delta, patch_nbpts) for pos in initial_positions]

bz_vals = np.linspace(0, 4.9, 151)


meas, points = um.Measure.getFiles(f"{LOG_PATH}/Spin", 'magneto2')

for i, f in uu.enumtq(points):
    npz = uf.loadNpz(f)
    traces[i] = npz.array
#imshow(map_trace, x_axis = p1_vals, x_label='P1 (V)', y_axis=bz_vals, y_label='Bz (T)')

# %%% plot all
def plotAll(np3d, filt=lambda im: im, x=0, 
            superpose_trans=False, trans_positions=None):
    fig, axes = plt.subplots(2, 6, figsize=(15, 8), sharex=False, sharey=False)  # Changed to 2x6 layout
    
    for i in range(12):
        img = filt(np3d[:, i, :])
        img = img[:, x:-x]
        ax = axes[i // 6, i % 6]  # Adjusted indexing for 2x6 layout
        
        x_vals = patches_p1[i]
        
        im = ax.imshow(
            img, aspect='auto', interpolation='none',
            extent=[x_vals[x], x_vals[-x], bz_vals.min(), bz_vals.max()],
            origin='lower', cmap='viridis'
        )

        
        if i == 6:
            ax.set_xlabel('P1 (V)')
            ax.set_ylabel('Bz (T)')

        if superpose_trans and trans_positions is not None:
            ax.scatter(trans_positions[i], bz_vals, color='red', s=5) 
          
        xticks = np.arange(x_vals[x], x_vals[-x], 0.05)
        ax.set_xticks(np.round(xticks, 3))
        ax.text(0.9, 0.9, f'{i+1}', fontsize=8, color='white', ha='right', va='top', transform=ax.transAxes)
    
    plt.subplots_adjust(hspace=0.4, wspace=0.4)  # Adjust horizontal and vertical spacing
    plt.tight_layout(rect=[0, 0.05, 1, 1])  # Adjust layout to fit labels within the figure
    plt.show()
    plt.tight_layout()

# Function to compute the derivative in the x direction
def compute_derivative(image):
    return np.gradient(image, axis=1)  # Assuming x is the second dimension

plotAll(traces, x=30)
#plotAll(traces, filt=compute_derivative, x=30)
# %%% find transition position
trans_positions = np.full((12, 151), np.nan, dtype=float)
b_id = 80
trace = traces[b_id]

plt.figure()
peaks = []
for patch_id, patch in enumerate(trace):
    #print(patch_id)
    #plt.plot(patch, label=patch_id)
    filtered = patch.copy()
    filtered = ua.gaussian(filtered, 3)
    filtered = abs(np.diff(filtered))
    #plt.plot(filtered, label=patch_id)
    p, _ = ua.findPeaks(filtered, 1e-10)    
    peaks.append(p if len(p) == 1 else np.nan)
    plt.vlines(p, np.min(patch), np.max(patch), color='red', linestyle='--')
    plt.plot(patch, label=patch_id)
    
plt.legend()

# %%%% above but for all b_id
trans_positions = np.full((12, 151), np.nan, dtype=float)
trans_positions_p1 = np.full((12, 151), np.nan, dtype=float)

for b_id in range(len(bz_vals)):
    peaks = []
    for patch_id, patch in enumerate(traces[b_id]):
        filtered = patch.copy()
        filtered = ua.gaussian(filtered, 3)
        filtered = abs(np.diff(filtered))
        if b_id < 5:
            prominence = 1.8e-11
        elif b_id < 86:
            prominence = 0.9e-10
        else:
            prominence = 1.8e-11
        p, _ = ua.findPeaks(filtered, prominence)    
        peaks.append(p[0] if len(p) == 1 else np.nan)
        
    # print(peaks)
    p1s = [patches_p1[patch_id][int(p)] if not np.isnan(p) else np.nan for patch_id, p in zip(range(12), peaks)]
    trans_positions[:,b_id] = peaks
    trans_positions_p1[:,b_id] = p1s
    
def filt(patch):
    filtered = patch.copy()
    filtered = ua.gaussian(filtered, 3)
    filtered = abs(np.diff(filtered))
    return filtered
plotAll(traces, filt=filt, x=30, superpose_trans=True, trans_positions=trans_positions_p1)
# %%% fit each

fits = np.full((12, 2), np.nan, dtype=float)
fit_lines = np.full((12, 151), np.nan, dtype=float)
fig, ax = plt.subplots(figsize=(2,10))
for i in range(len(trans_positions_p1)):
    valid_indices = ~np.isnan(trans_positions_p1[i])
 
    filtered_bz_vals = bz_vals[valid_indices]
    
    filtered_trans_positions = trans_positions_p1[i][valid_indices]
    
    fit_params = np.polyfit(filtered_bz_vals, filtered_trans_positions, 1)
    fits[i] = fit_params
    fit_line = np.polyval(fit_params, bz_vals)
    fit_lines[i] = fit_line
   
    factor = 1 #i/32
    
    color = plt.gca()._get_lines.get_next_color()
    ax.plot(bz_vals, fit_line * factor, linestyle='-', marker='', color=color)
    ax.plot(bz_vals, trans_positions_p1[i] * factor, linestyle='', marker='o', color=color)
   
    ax.annotate(f'${fit_params[0]:.6f}*x + {fit_params[1]:3f}$', 
                 xy=(bz_vals[-1], fit_line[-1]* factor), 
                 xytext=(bz_vals[-1], fit_line[-1]* factor),
                 fontsize=8)
ax.set_xlabel('P1 (V)')
ax.set_ylabel('Bz (T)')
ax.grid()
# %%% deltas on fit

deltas = np.full((11, 151), np.nan, dtype=float)

fig, ax = plt.subplots()
for i in range(len(fit_lines)-1):
    #delta = fit_lines[i+1] - fit_lines[i]
    delta = trans_positions_p1[i+1] - trans_positions_p1[i]
    deltas[i] = delta
    
    mask = ~np.isnan(delta)
    filtered_bz_vals = bz_vals[mask]
    filtered_delta = delta[mask]
    fit_params = np.polyfit(filtered_bz_vals, filtered_delta, 1)
    fit_line = np.polyval(fit_params, bz_vals)
    #print(fit_line)
    
    offset = - fit_line[0]
    color = plt.gca()._get_lines.get_next_color()
    
    ax.plot(bz_vals, delta + offset, linestyle='', marker='o', color=color, alpha=0.1)
    ax.plot(bz_vals, fit_line + offset, linestyle='-', marker='', color=color)
    #ax.plot(bz_vals, delta + factor*i, linestyle='', marker='o')
    
    ax.annotate(f'{i+1}->{i+2}', 
                  xy=(bz_vals[-1], fit_line[-1] + offset), 
                  xytext=(1.01*bz_vals[-1], fit_line[-1] + offset),
                  fontsize=8)
    
ax.set_ylabel('$\Delta$ P1 (V)')
ax.set_xlabel('Bz (T)')

#fig.legend()
ax.grid()


# %%% test
def shiftLinesBy(img, id_shift):
    new_img = np.full( (img.shape[0], (img.shape[1]+1)*id_shift), np.nan, dtype=float)
    for id_line in range(len(img)):
        new_img[id_line][(id_line*id_shift):] = img[id_line]
    return new_img