# %% imports
import platform
LS_PATH, LOG_PATH = \
            {'windows':['C:/Codes/Lab-Scripts', 
                  '//bob.physique.usherbrooke.ca/recherche/Dupont-Ferrier/Projets/IMEC_DD_reflecto/QBB16_SD11b_3/'],
             'linux':['/home/local/USHERBROOKE/mora0502/Codes/Lab-Scripts',
                  '/run/user/1338691803/gvfs/smb-share:server=bob.physique.usherbrooke.ca,share=recherche/Dupont-Ferrier/Projets/IMEC_DD_reflecto/QBB16_SD11b_3/']}\
            [platform.system().lower()]
%cd $LS_PATH

from Utils import analyse as ua
from Utils import files as uf
from Utils import plot as up
from Utils import utils as uu
from Utils import measure as um

from Utils.plot import imshow, qplot
from tqdm import tqdm
from icecream import ic

from pyHegel import fitting as fit
import pyHegel.commands as c
import numpy as np
from matplotlib import pyplot as plt
import matplotlib

# %% map P1 B1
dict_file = uf.readfileNdim(LOG_PATH + '/Hlab/20241021/113941_B1_P1.txt')
set_low = uf.readfileNdim(LOG_PATH + '/Hlab/20241021/145605_ST_low_sensitivity.txt')
p1_low, b1_low = 1.7, 0.3
set_high = uf.readfileNdim(LOG_PATH + '/Hlab/20241021/145823_ST_high_sensitivity.txt')
p1_high, b1_high = 2.7, 0.8
# %%%
p1_b1 = ua.alternate(dict_file['zurich_UHF.readval.ch0_r'])
p1, b1 = dict_file['P1.ramp'][0], dict_file['bilt_9._B1'][:,1]
imshow(p1_b1, x_axis=p1, y_axis=b1, x_label='P1 (V)', y_label='B1 (V)')
trace1 = p1_b1[25]

# %%%
#trace = ua.filter_frequencies(trace, p1, [0.2, 0.5, 1], show_plot=False)
plt.plot(-trace1+np.mean(trace1))
trace = -trace1
peaks = ua.findPeaks(trace, prominence=0.0001)

trace = np.diff(trace)
plt.plot(trace)

# %%% set
set_vals = set_low['bilt_7._ST']
low, high = set_low['zurich_UHF.readval.ch0_r'], set_high['zurich_UHF.readval.ch0_r']
plt.plot(set_vals, low, label='low sensitivity')
plt.plot(set_vals, high, label='high sensitivity')
plt.axvline(2.987, color='grey', linestyle='--')
inters = ua.getValue(set_vals, high, 2.987)
plt.axhline(inters, color='grey', linestyle='--')

inters_at_low = set_vals[len(low)//2+ua.findNearest(low[len(low)//2:], inters,'id')]
plt.axvline(inters_at_low, color='grey', linestyle='--')
#plt.text(3, 0.01, f"{inters_at_low:.5f}")

plt.legend(fontsize='large')
plt.xlabel('ST (V)')


# %% mesure
p1_vals = np.linspace(0.3, 3.6, 3301)
b1_vals = 0.2*(p1_vals-0.3) + 0.4
st_vals = -0.0078*(p1_vals-1.45) + 2.989
bz_vals = np.linspace(0, 5, 101)

plt.figure()
plt.plot(p1_vals,label='p1')
plt.plot(b1_vals,label='b1')
plt.plot(st_vals,label='st')
plt.legend()

# %%% instruments
from pyHegel import instruments
dmm = instruments.agilent_multi_34410A("USB0::0x2A8D::0x0101::MY57515472::INSTR")
readval = dmm.readval
readval = instruments.ScalingDevice(readval, scale_factor=10000000.0, only_val=True, invert_trans=True)
bilt_9 = instruments.iTest_be214x("TCPIP::192.168.150.112::5025::SOCKET", slot=9)
B1_en = (bilt_9.output_en, {'ch': 2})
B1 = (bilt_9.ramp, {'ch': 2})
B1 = instruments.LimitDevice(B1, min=-3.0, max=3.0)
bilt_7 = instruments.iTest_be214x("TCPIP::192.168.150.112::5025::SOCKET", slot=7)
ST_en = (bilt_7.output_en, {'ch': 1})
ST = (bilt_7.ramp, {'ch': 1})
ST = instruments.LimitDevice(ST, min=-4.0, max=4.0)
magnet_z = instruments.AmericanMagnetics_model430("tcpip::192.168.137.214::7180::socket")
field_z = magnet_z.ramp_field_T
rhP1 = instruments.iTest_be2102("TCPIP::192.168.150.112::5025::SOCKET", slot=3)
P1_en = rhP1.output_en
P1 = rhP1.ramp

# %%%p1 b1
a = uf.loadNpz('D:/QBB16_SD11b_3/Spin/20241021-174255-magneto/20241023/20241023-102022-B1_P1.npz')
imshow(a.array, y_slice=(0,46))
# %%% start

meas = um.Measure(r"D:/QBB16_SD11b_3/Spin/", 'magneto', metadata=dict(p1_vals=p1_vals, b1_vals=b1_vals, st_vals=st_vals, bz_vals=bz_vals))

for i, b in tqdm(enumerate(bz_vals), total=len(bz_vals)):
    if i < 56: continue
    #print(i,b)
    field_z.set(b)
    res = np.empty(len(p1_vals))
    
    for j, (p1, b1, st) in tqdm(enumerate(zip(p1_vals, b1_vals, st_vals)),total = len(p1_vals)):
        #print(j,p1,b1,st)
        P1.set(p1)
        B1.set(b1)
        ST.set(st)
        
        res[j] = readval.get()
        
    meas.saveArray(res, metadata=dict(bz=b))

# 56, 57, 58, 59, 60, 61: SET shift -> redo

# %%% plot test
p = "D:/QBB16_SD11b_3/Spin//20241021-174255-magneto/20241021-180017-magneto_0"
npzdict = uf.loadNpz(p)
plt.plot(npzdict.array)
trace = npzdict.array
# %%%
plt.plot(trace-np.mean(trace))
plt.plot(ua.lfilter(np.diff(trace), 0))
plt.plot(ua.lfilter(np.diff(trace), 1))

meas_file, point_files = um.Measure.getFiles(r"D:/QBB16_SD11b_3/Spin/", 'magneto')
[qplot(f) for f in point_files[50:]]

#plt.plot(trace)
#plt.plot(ua.lfilter(trace, 3))

# %%%
file = point_files[56]
npzdict = uf.loadNpz(file)

# %% ANALYSE
# %%% one file
file = '/run/user/1338691803/gvfs/smb-share:server=bob.physique.usherbrooke.ca,share=recherche/Dupont-Ferrier/Student/Alexis/_tmp/20241022-221259-magneto_97.npz'
file1 = r'D:\QBB16_SD11b_3\Spin\20241021-174255-magneto/20241021-180017-magneto_0.npz'
file2 = r'D:\QBB16_SD11b_3\Spin\20241021-174255-magneto/20241023-003141-magneto_105.npz'
npz1 = uf.loadNpz(file1)
npz2 = uf.loadNpz(file2)

# %%%%
arr1, bz1 = npz1.array, npz1.rget('bz')
arr2, bz2 = npz2.array, npz2.rget('bz')
qplot(arr1)
qplot(arr2)

# %%%%
diff = ua.lfilter(np.diff(ua.lfilter(arr1,10)), 20) 

#seg1, seg2 = diff[250:2600], diff[2600:]
slice_seg = slice(250,1500)
seg1, seg2 = diff[slice_seg], diff[slice_seg.stop:]

peaks_id1, prominence1 = ua.findPeaks(seg1, prominence=0.45e-10, show_plot=True)
peaks_id2, prominence2 = ua.findPeaks(seg2, prominence=0.05e-10, show_plot=True)

peaks_ids = np.concatenate((peaks_id1+slice_seg.start, peaks_id2+slice_seg.stop)) - 10
qplot(arr1, vline=peaks_ids)


# %%%% plot
p1_vals = np.linspace(0.3, 3.6, 3301)
b1_vals = 0.2 * (p1_vals - 0.3) + 0.4
fig, ax1 = plt.subplots()

ax1.plot(p1_vals, arr1)
ax1.set_xlabel('P1 (V)')
ax1.set_ylabel('I_SET')
ax1.grid()

ax2 = ax1.twiny()  # Create a twin axis sharing the same y-axis
ax2.set_frame_on(True)
ax2.patch.set_visible(False)
ax2.xaxis.set_label_position('bottom')
ax2.xaxis.set_ticks_position('bottom')
ax2.spines['bottom'].set_position(('outward', 50))
ax2.plot(b1_vals, arr1, alpha=0)  # Plot invisible data to align the axes
ax2.set_xlabel('B1 (V)')

for i, p in enumerate(peaks_ids):
    x = p1_vals[p]
    ax1.axvline(x=x, linestyle=':', color='red')
    ax1.text(x, np.min(arr1), f'{i+1} electron', rotation=90, verticalalignment='bottom')

plt.show()

# %%% every file
# %%%% load
map_trace = np.full((101,3301),np.nan, dtype=float)
fields = np.empty(101)

meas, points = um.Measure.getFiles(r"D:/QBB16_SD11b_3/Spin/", 'magneto')


for i, f in enumerate(points):
    npz = uf.loadNpz(f)
    fields[i] = npz.rget('bz')
    map_trace[i] = npz.array
# %%%% plot
imshow(map_trace, x_axis=p1_vals, x_axis2=b1_vals, x_label='P1 (V)', x_label2='B1 (V)', y_axis=bz_vals, y_label='Bz (T)',cbar_label='I_SET')
# %%%%

result = np.full((101,31),np.nan, dtype=float)

def analyse(trace, type_=1, text=''):
    
    diff = ua.lfilter(np.diff(ua.lfilter(trace,10)), 20)
    diff = -diff if type_==2 else diff

    slice_seg = {1: slice(250,1500), 2: slice(250, 2000)}[type_]

    seg1, seg2 = diff[slice_seg], diff[slice_seg.stop:]
    prom1, prom2 = {1: (0.45e-10, 0.05e-10), 2: (0.17e-10, 0.05e-10)}[type_]

    peaks_id1, prominence1 = ua.findPeaks(seg1, prominence=prom1, show_plot=False)
    peaks_id2, prominence2 = ua.findPeaks(seg2, prominence=prom2, show_plot=False)

    peaks_ids = np.concatenate((peaks_id1+slice_seg.start, peaks_id2+slice_seg.stop)) - 10
    qplot(trace, vline=peaks_ids, text=text+ f' nb:{len(peaks_ids)}')
    return peaks_ids


for i, t in enumerate(map_trace[:]):
    type_ = 1 if i < 56 else 2
    peaks_ids = analyse(t, type_, text=str(i))
    #result[i] = peaks_ids

# %%%% by hand
# %%%%%
d = {i:[] for i in range(101)}
# %%%%%
i =100
trace, type_ = map_trace[i], 2
diff = ua.lfilter(np.diff(ua.lfilter(trace,10)), 20)
diff = -diff if type_==2 else diff

slice_seg = {1: slice(250,1500), 2: slice(250, 2000)}[type_]
end_seg = {1: None, 2:-400}[type_]

seg1, seg2 = diff[slice_seg], diff[slice_seg.stop:end_seg]
prom1, prom2 = {1: (0.50e-10, 0.08e-10), 2: (0.17e-10, 0.05e-10)}[type_]
prom1, prom2 = {1: (1.6e-11, 0.08e-10), 2: (0.17e-10, 0.05e-10)}[type_]

peaks_id1, prominence1 = ua.findPeaks(seg1, prominence=prom1, show_plot=True)
#peaks_id1 = ua.removeId(peaks_id1,1)

seg2 = np.concatenate((seg2, [min(seg2)]*5))
peaks_id2, prominence2 = ua.findPeaks(seg2, prominence=prom2, show_plot=True)

peaks_ids = np.concatenate((peaks_id1+slice_seg.start, peaks_id2+slice_seg.stop)) - 10
qplot(trace, vline=peaks_ids[:], text=f'nb:{len(peaks_ids)}')

d[i] = peaks_ids[:] # 
#'D:/QBB16_SD11b_3/Spin/20241023/20241023-151217-magneto_positions.npz'
# 0: 31 peaks
# 30: 33 peaks
# 34: 32 peaks
# %%%%%
qplot([ua.lfilter(t,5) for t in map_trace[:]],x_axis=p1_vals, multi=True,linestyle='',marker='.',vline=ua.multiget(p1_vals,peaks_ids))
# %%%%%
plt.figure()
for i, t in d.items():
    plt.plot(t, marker='.', linestyle='')
plt.grid()
# %%%%% cleanup, dict per transition
expected_ranges = [[350,425], [425,500], [500,575], (600,700),(700,800), (850,900),(950,1000), (1025, 1100),(1100,1200),
          [1200,1300], [1300,1400], [1400, 1450], (1450, 1550), (1550,1650), (1650, 1750), (1750,1825), (1825,1900),
          [1900,2000], (2000,2100), (2200,2250), (2275,2350), (2375, 2450), (2450, 2550), (2550, 2600), (2625,2700),
          (2700,2800), (2800,2875), (2900,2950), (3000,3050), (3050,3150), (3150,3250), (3250, 3300), (3300, 5000)]

d2 = {}
for transition_id, range_ in enumerate(expected_ranges):
    
    positions = [] # [(bz_id, position), ...]
    
    for trace_id, transition_position_ids in d.items():
        
        for i, id_ in enumerate(transition_position_ids):
            
            if id_ > range_[0] and id_ < range_[1]:
                positions.append((trace_id,id_))
                break
        continue
    
    positions = np.array(positions)
    d2[transition_id] = positions
d2.pop(32, None)
# remove 1, 2 and shift everything
d2.pop(1,None)
d2.pop(2,None)
for i in range(3,32):
    d2[i-2] = d2[i]
# %%%%%
plt.figure()
for i in range(32):
    plt.plot(ua.multiget(bz_vals, d2[i][:,0]), ua.multiget(p1_vals, d2[i][:,1]), marker='.', linestyle='')
plt.grid()
# %%%%% delta
plt.figure()

for i in range(0, 16):
    delta = d2[i + 1][:, 1] - d2[i][:, 1]
    y_values = ua.multiget(p1_vals, delta)
    y_values = y_values - y_values[0] + i / 32
    y_values *= 1e3
    
    x_values = ua.multiget(bz_vals, d2[i][:, 0])
    
    plt.plot(x_values, ua.gaussian(y_values,1), marker='.', linestyle='', label=f'{i}->{i + 1}')
    
    coefficients = np.polyfit(x_values, y_values, 1)
    fit_line = np.polyval(coefficients, x_values)

    plt.plot(x_values, fit_line, linestyle='-', color='grey', alpha=0.5)
    
    slope = coefficients[0]
    plt.annotate(f'Slope: {slope:.3f}, {i}->{i + 1}', 
                 xy=(x_values[-1], fit_line[-1]), 
                 xytext=(x_values[-1], fit_line[-1]),
                 fontsize=8)

plt.xlabel('Bz (T)')
plt.ylabel('E add (mV)')
plt.grid()
plt.show()




# %% remesure avec patchs
