# %% imports
OS = 'l' # 'l' | 'w'
LS_PATH, LOG_PATH = \
            {'w':['C:/Codes/Lab-Scripts', 
                  '//bob.physique.usherbrooke.ca/recherche/Dupont-Ferrier/Projets/IMEC_DD_reflecto/QBB16_SD11b_3/Spin/'],
             'l':['/home/local/USHERBROOKE/mora0502/Codes/Lab-Scripts',
                  '/run/user/1338691803/gvfs/smb-share:server=bob.physique.usherbrooke.ca,share=recherche/Dupont-Ferrier/Projets/IMEC_DD_reflecto/QBB16_SD11b_3/Spin/']}\
            [OS]
%cd $LS_PATH

from Utils import analyse as ua
from Utils import files as uf
from Utils import plot as up
from Utils import utils as uu

from Utils.plot import imshow, qplot
from tqdm import tqdm
from icecream import ic

from pyHegel import fitting as fit
import numpy as np
from matplotlib import pyplot as plt
import matplotlib

# %% PIPELINE
# t1: -1 awgoverrange, -2 peaks error, -3 not enough counted trace, -4 exp fit error
before_read_time = 0.0018
after_read_cut = -500
class_inverse = False
class_tolerance = 60
plot=False
def pl(file, class_inverse=class_inverse, plot=plot, 
       before_read_time=before_read_time,
       after_read_cut=after_read_cut,
       class_tolerance=class_tolerance):
    name = file.split('-')[-1]
    load_dict = uf.loadNpz(file)
    metadata, raw = load_dict.get('metadata'), load_dict.get('array')

    # take from metadata
    t1, p1, p2 = None, metadata.get('p1'), metadata.get('p2')
    timelist_raw = np.linspace(0, metadata.get('imshow_kwargs').get('x_axis'), len(raw[0]))
    if metadata.get('awg_overrange', False): return -1, p1, p2

    # cut
    cut_id_start = ua.findNearest(timelist_raw, before_read_time, 'id') # remove beginning of the pulse
    arr = ua.sliceColumns(raw, cut_id_start, after_read_cut)
    timelist = timelist_raw[cut_id_start:after_read_cut]
    timelist = np.asarray(timelist)-timelist[0]

    # filter and stuff
    filt = ua.gaussianlbl(arr, 40)
    bins, hist = ua.histogram(filt, return_type='all')
    peaks, prop = ua.findPeaks(hist, show_plot=plot, prominence=max(hist)*0.03)
    if plot: imshow(filt)

    if len(peaks) != 2: return -2, p1, p2

    p0 = [0.4, 0.4, bins[peaks[0]], bins[peaks[1]], hist[peaks[0]], hist[peaks[1]]]
    dg_params = ua.ajustementDeCourbe(ua.f_doubleGaussian, bins, hist, p0=p0, show_plot=False)
    th = ua.findClassifyingThreshold(dg_params, 'min')
    clas = ua.classify(filt, th, inverse=class_inverse)
    clas_clean = np.apply_along_axis(ua.cleanTrace, arr=clas, axis=1, tolerance=class_tolerance)
    #up.plotSideBySide(raw, arr, filt, clas, clas_clean, link_all=True)
    #if plot: up.plotDoubleGaussian(bins, *dg_params, hist, th, title=f"{file.split('-')[-1]}")

    stats_dict = ua.classTraces(clas_clean, timelist)
    counted_trace = stats_dict.get('low') + stats_dict.get('high')

    if counted_trace == stats_dict.get('high'): return -3, p1, p2
    if counted_trace == stats_dict.get('low'): return -3, p1, p2
    if counted_trace < 10: return -3, p1, p2

    points = [np.sum(np.where(np.asarray(stats_dict['high_fall_time']) < t, 0, 1))/counted_trace for t in timelist]
    #A, t1 = ua.fitExpDecayLinear(timelist, points, verbose=True, show_plot=True, text=file)
    plot=True
    t1, A = ua.ajustementDeCourbe(ua.f_expDecay, timelist, points, show_plot=plot, p0=[0.02, 0.2], plot_title=name)
    plot=False
    return t1, p1, p2

# %% 20240910 map T1
days = [LOG_PATH + d for d in ['20240908', '20240909', '20240910']]
files = uf.fileIn(days, contains='zone_', verbose=True)
tr = uf.loadNpz(LOG_PATH+'20240906/20240906-164238-transition_.npz')

before_read_time = 0.03 + 0.03
after_read_cut = None
class_inverse = True
class_tolerance = 200
res = [pl(f, class_inverse=class_inverse, before_read_time=before_read_time) for f in tqdm(files)]

# %%% plot
res_clean = [(0, t[1], t[2]) if t[0] < 0 else t for t in res]
kwargs = dict(
              x_axis=tr.rget('x_axis'),
              y_axis=tr.rget('y_axis'),
              x_label='P2 (V)',
              y_label='P1 (V)',
              cmap='viridis',
              cbar=False,
              cbar_label='lockin',
              scatter_points=res_clean,
              scatter_cmap='inferno_r',
              scatter_cbar_label='T1 (s)',
              scatter_cbar=True,
              scatter_size=20,
              scatter_alpha=0.7,
              figsize=[5,4],
              return_type='win')

imshow(tr.array, **kwargs)




# %% 20240909 very long T1
days = [LOG_PATH + d for d in ['20240906', '20240907']]
files = sorted(uf.fileIn(days, contains='T1_', verbose=True))

file5 = uf.loadNpz(files[0])
file10 = uf.loadNpz(files[1])
merged_array = np.concatenate((file5.array, file10.array))

load_dict = {'array': merged_array, 'metadata': file5.metadata}

before_read_time = 0.01*3
after_read_cut = None
class_inverse = True
class_tolerance = 200

# uf.saveToNpz(LOG_PATH, 'points_long_T1', 
             # points, metadata=dict(timelist=timelist))
points_dict = uf.loadNpz(LOG_PATH+'20240909/20240909-102548-points_long_T1.npz')
points, timelist = points_dict.array, points_dict.metadata.get('timelist')

# %%% fits
#régime1
cut = [500, 2500]
timelist_fit_1, points_fit_1 = timelist[cut[0]:cut[1]], points[cut[0]:cut[1]]
t1_1, A_1 = ua.ajustementDeCourbe(ua.f_expDecay, timelist_fit_1, points_fit_1, show_plot=True, p0=[0.5, 0.2])

#régime2
cut = [2500, None]
timelist_fit_2, points_fit_2 = timelist[cut[0]:cut[1]], points[cut[0]:cut[1]]
t1_2, A_2 = ua.ajustementDeCourbe(ua.f_expDecay, timelist_fit_2, points_fit_2, show_plot=True, p0=[0.5, 0.2])

# %%% pretty plot
fig, ax = plt.subplots(figsize=(5,4))
ax.plot(timelist, points, marker='o')[0]
ax.plot([], [], ' ', label=r"fit: $A*e^{-t/\tau}$")
ax.plot(timelist, ua.f_expDecay(timelist, t1_1, A_1), color='red', 
        label=f"$A={round(A_1, 3)}, "+r"\tau"+f"={round(t1_1, 4)}$")
ax.plot(timelist, ua.f_expDecay(timelist, t1_2, A_2), color='orange', 
        label=f"$A={round(A_2, 3)}, "+r"\tau"+f"={round(t1_2, 4)}$")


ax.set_xlabel('time (s)')
ax.set_ylabel('P_triplet')
ax.legend()
ax.grid()

# %% 20240821-23 map T1 a B=.8, 'oneshot'
days = [LOG_PATH + d for d in ['20240821', '20240822', '20240823']]
files = sorted(uf.fileIn(days, contains='mesureT1_oneshot', verbose=True))
resoneshot = [pl(f, False) for f in tqdm(files)]
#uf.saveToNpz(LOG_PATH+'20240821', 'resoneshot', resoneshot, make_date_folder=False)re
# %%% load
resoneshot = uf.loadNpz('/run/user/1338691803/gvfs/smb-share:server=bob.physique.usherbrooke.ca,share=recherche/Dupont-Ferrier/Projets/IMEC_DD_reflecto/QBB16_SD11b_3/Spin/20240821/20240826-183809-resoneshot.npz').get('array')
map_ = uf.loadNpz(LOG_PATH+'20240821'+'/20240821-225919-transition_B=800mT_retour.npz')
# %%% clean
resoneshot_clean = [(0, t[1], t[2]) if t[0] < 0 else t for t in resoneshot]
resoneshot_clean = [(0, t[1], t[2]) if t[0] > 1.0 else t for t in resoneshot_clean]
resoneshot_arr = np.asanyarray(resoneshot_clean)
# np.argmax(resoneshot_arr[:,0])
# %%% plot
kwargs = dict(
              x_axis=map_.rget('x_axis'),
              y_axis=map_.rget('y_axis'),
              x_label='P2 (V)',
              y_label='P1 (V)',
              cmap='viridis',
              cbar=False,
              cbar_label='lockin',
              scatter_points=resoneshot_clean,
              scatter_cmap='inferno_r',
              scatter_cbar_label='T1 (s)',
              scatter_cbar=True,
              scatter_size=20,
              scatter_alpha=0.7,
              figsize=[5,4],
              return_type='win')

imshow(map_.get('array'), **kwargs)


# %% 20240821 T1(B)
files100 = sorted(uf.fileIn(LOG_PATH+'20240821', contains='mesureT1_bz=100m'))
files500 = sorted(uf.fileIn(LOG_PATH+'20240821', contains='mesureT1_bz=500m'))
files800 = sorted(uf.fileIn(LOG_PATH+'20240821', contains='mesureT1_bz=800m'))
files1000 = sorted(uf.fileIn(LOG_PATH+'20240821', contains='mesureT1_bz=1000m'))
files1200 = sorted(uf.fileIn(LOG_PATH+'20240821', contains='mesureT1_bz=1200m'))

tr100 = uf.loadNpz(LOG_PATH+'20240821/20240821-190407-transition_B=100mT.npz')
tr500 = uf.loadNpz(LOG_PATH+'20240821/20240821-175122-transition_B=500mT.npz')
tr800 = uf.loadNpz(LOG_PATH+'20240820/20240820-105251_vm_transition.npz')
tr1000 = uf.loadNpz(LOG_PATH+'20240821/20240821-141006-transition_B=1T.npz')
tr1200 = uf.loadNpz(LOG_PATH+'20240821/20240821-150546-transition_B=1200mT.npz')

res100 = [pl(f) for f in tqdm(files100)]
res500 = [pl(f) for f in tqdm(files500)]
res800 = [pl(f) for f in tqdm(files800)]
res1000 = [pl(f) for f in tqdm(files1000)]
res1200 = [pl(f) for f in tqdm(files1200)]

res100_clean = [(0, t[1], t[2]) if t[0] < 0 else t for t in res100]
res500_clean = [(0, t[1], t[2]) if t[0] < 0 else t for t in res500]
res800_clean = [(0, t[1], t[2]) if t[0] < 0 else t for t in res800]
res1000_clean = [(0, t[1], t[2]) if t[0] < 0 else t for t in res1000]
res1200_clean = [(0, t[1], t[2]) if t[0] < 0 else t for t in res1200]
res1200_clean = [(0, t[1], t[2]) if t[0] > 0.07 else t for t in res1200_clean]

texts = ['100', '500', '800', '1000', '1200']
trs = [tr100, tr500, tr800, tr1000, tr1200]
ress = [res100_clean, res500_clean, res800_clean, res1000_clean, res1200_clean]

# %%% plot imgs
for tr, res, text in zip(trs, ress, texts):
    kwargs = dict(
                  x_axis=tr.rget('x_axis'),
                  y_axis=tr.rget('y_axis'),
                  x_label='P2 (V)',
                  y_label='P1 (V)',
                  cmap='viridis',
                  cbar=False,
                  scatter_points=res,
                  scatter_cmap='Purples',
                  scatter_cbar_label='T1 (s)',
                  scatter_cbar=True,
                  text=f"{text} mT", text_color='white',
                  figsize=[3,3])

    imshow(tr.get('array'), **kwargs)


# %%% plot traces
fig, ax = plt.subplots(figsize=[1,1])
plt.rcParams.update({'font.size': 15})
cmap = matplotlib.cm.get_cmap('Blues')
num_lines = len(ress)+1

for i, (res, text) in enumerate(zip(ress, texts)):
    t1s = np.asarray(res)[:, 0]
    color = cmap((i+1) / (num_lines - 1))
    ax.plot(np.linspace(0, len(t1s), len(t1s)), t1s,
            label=f"{text} mT", marker='o', color=color)

ax.set_xlabel('detuning $\epsilon$')
ax.set_ylabel('T1 (s)')
ax.set_xticks([])
ax.legend()
plt.show()

# %%% plot max(traces)
maxi = [1/np.max(np.asarray(res)[:,0]) for res in ress]
maxi[0] = 0
fig, ax = plt.subplots()
ax.plot(np.array([100, 500, 800, 1000, 1200])*1e-3, maxi, marker='o', linestyle='')
ax.set_ylabel(r'$1/T_1$ (Hz)', fontsize=15)
ax.set_xlabel('$B_z$ (T)', fontsize=15)
ax.set_yscale('log')
fig.show()

# %% 20240820 map T1 a B=.8, 'we' et zone 1 2 3
days = [LOG_PATH+d for d in ['20240816', '20240817', '20240818', '20240819', '20240820', '20240821']]
fileswe = sorted(uf.fileIn(days, contains=('mesureT1_we', 'mesureT1_2_we')))
filesz123 = sorted(uf.fileIn(days, contains=('mesureT1_z')))

reswe = [uu.try_(lambda: pl(f), (-10, np.nan, np.nan)) for f in tqdm(fileswe)]
resz123 = [uu.try_(lambda: pl(f), (-10, np.nan, np.nan)) for f in tqdm(filesz123)]
#uf.saveToNpz(LOG_PATH+'20240821', 'reswe', reswe, make_date_folder=False)
#uf.saveToNpz(LOG_PATH+'20240821', 'resz123', resz123, make_date_folder=False)

# %%% load 
tr_map = uf.loadNpz(LOG_PATH+'20240820/20240820-105251_vm_transition.npz')
reswe = uf.loadNpz(LOG_PATH+'20240821/20240827-162036-reswe.npz').array
resz123 = uf.loadNpz(LOG_PATH+'20240821/20240827-145634-resz123.npz').array

# %%% exclude resz123
resz123_exclude = [132, 348, 117, 317, 333, 301, 349, 350, 286, 6, 5, 7, 318, 302, 334, ]
resz123_clean = [(-10, np.nan, np.nan) if t[0]==-10 else t for t in resz123]
resz123_clean = [(0, t[1], t[2]) if t[0] < 0 else t for t in resz123_clean]
resz123_clean = [(0, t[1], t[2]) if i in resz123_exclude else t for i, t in enumerate(resz123_clean)]
#pl(filesz123[ic(np.argmax(np.asarray(resz123_clean)[:,0]))], plot=True)
# %%% exclude reswe
reswe_exclude = [431, 487, 430, 433, 460, 448, 490, 463, 445, 451, 484, 466, 472, 478, 475, 35, 457, 469, 49, 454]
fileswe_doubleid = [val for i in range(28) for val in (0 + i * 15, 1 + i * 15)] # overlaping points
reswe_clean = [(-10, np.nan, np.nan) if idx in fileswe_doubleid else reswe[idx] for idx in range(len(reswe))]
reswe_clean = [(0, t[1], t[2]) if t[0] < 0 else t for t in reswe_clean]
reswe_clean = [(0, t[1], t[2]) if i in reswe_exclude else t for i, t in enumerate(reswe_clean)]
#pl(fileswe[ic(np.argmax(np.asarray(reswe_clean)[:,0]))], plot=True)

# %%% plot superpose
res = reswe_clean + resz123_clean
kwargs = dict(
              x_axis=tr_map.rget('x_axis'), y_axis=tr_map.rget('y_axis'),
              x_label='P2 (V)', y_label='P1 (V)',
              cmap='viridis', cbar=False, cbar_label='lockin',
              scatter_points=[(r[0]*1e3, r[1], r[2]) for r in res],
              scatter_points_label='none',
              scatter_cmap='magma_r',
              scatter_cbar_label='T1 (ms)',
              scatter_cbar=True,
              scatter_size=60,
              scatter_alpha=0.8,
              figsize=[5,4],
              return_type='qt')

imshow(tr_map.get('array'), **kwargs)


# %% 20240816 T1 map 2, meme point.
files = uf.fileIn(LOG_PATH+'20240816', contains=('mesureT1_pm'))
points = ua.genTrapezoidSweep(0.551, 0.556, 6, 1.030, 1.044, 1.04, 1.05, 3)
res = [uu.try_(lambda: pl(f), (-10, np.nan, np.nan)) for f in tqdm(files)]
# %%% plot
plt.scatter(ua.linlen(res), np.asarray(res)[:,0]*1e3)
plt.ylabel('T1 (ms)')
# %%% std, error
t1s = np.asarray([d[0] for d in res])
p_avg = np.average(t1s, axis=0)
p_std = np.std(t1s, axis=0)
p_err = p_std/np.sqrt(len(t1s))

# %% 20240815 T1 map
# !!!! certains points sont au-delà de la range de l'awg

files = uf.fileIn(LOG_PATH+'20240815', contains='mesureT1')

p1_list= np.linspace(1.035, 1.05, 10)
p2_list = np.linspace(0.550, 0.558, 10)

# %%% build t1 map
t1_list = [pl(f, class_inverse=True) for f in tqdm(files)]
t1s = [(0, t[1], t[2]) if t[0] < 0 else t for t in t1_list]

p1_values = [item[2] for item in t1s]
p2_values = [item[1] for item in t1s]
t1_values = [item[0] for item in t1s]

# %%% plot
fig = plt.figure()
ax = fig.add_subplot(111)
sc = ax.scatter(p2_values, p1_values, c=t1_values, s=[v*100000 for v in t1_values], cmap='viridis')
ax.grid(True)
ax.set_xlabel('P1 read (V)')
ax.set_ylabel('P2 read (V)')
cbar = plt.colorbar(sc)
cbar.set_label('T1')
plt.show()

# %% 20240814 T1
# %%% load
data = uf.loadNpz('C:\Codes\Lab-Scripts/Spin/logs/20240815/20240815-171747-readout')
raw = data.get('array')
timelist = np.linspace(0, 0.051, len(raw[0]))
# %%% exclude first points
#print(data.get('metadata').get('pulseP1'))
cut_at_time = 0.006
cut_id = ua.findNearest(timelist, cut_at_time, 'id')
arr = raw[:, cut_id:]
timelist = timelist[cut_id:]
timelist = np.asarray(timelist)-timelist[0]

# %%% filter and stats
filt = ua.gaussianLineByLine(arr, 10)
th = ua.findClassifyingThreshold(filt, show_plot=False)
clas = ua.classify(filt, th, inverse=True)

d = ua.classTraces(clas, timelist)

# %%% stats again
counted_trace = d.get('low') + d.get('high')
stats = [np.sum(np.where(np.asarray(d['high_fall_time']) < t, 0, 1))/counted_trace for t in timelist]
fitres = fit.fitplot(ua.f_exp, timelist, stats, p0=[10e-3,1,0,0])

# %%% plot
plt.figure()
plt.plot(timelist, ua.f_exp(timelist, *fitres[0]), label='fit', color='red')
plt.plot(timelist, stats)
