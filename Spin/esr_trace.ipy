# %%
# -*- coding: utf-8 -*-
OS = 'l' # 'l' | 'w'
LS_PATH, LOG_PATH = \
            {'w':['C:/Codes/Lab-Scripts', 
                  '//bob.physique.usherbrooke.ca/recherche/Dupont-Ferrier/Projets/IMEC_DD_reflecto/QBB16_SD11b_3/Spin/'],
             'l':['/home/local/USHERBROOKE/mora0502/Codes/Lab-Scripts',
                  '/run/user/1338691803/gvfs/smb-share:server=bob.physique.usherbrooke.ca,share=recherche/Dupont-Ferrier/Projets/IMEC_DD_reflecto/QBB16_SD11b_3/Spin/']}\
            [OS]
%cd $LS_PATH

from Utils import analyse as ua
from Utils import files as uf
from Utils import plot as up
from Utils import utils as uu

from Utils.plot import imshow, qplot
from tqdm import tqdm
from icecream import ic

from pyHegel import fitting as fit
import numpy as np
from matplotlib import pyplot as plt
import matplotlib

# %% 20240910 drive sweep
files = uf.fileIn(LOG_PATH + '20240910/', contains=('drive'))
files = [f for f in files if not 'drive_test' in f]

# global things
npz = uf.loadNpz(files[0])
timelist = np.linspace(0, 0.07, len(npz.array[0]))
slice_read1 = slice(ua.findNearest(timelist, 0.02, 'id'), ua.findNearest(timelist, 0.04, 'id'))
slice_read2 = slice(ua.findNearest(timelist, 0.05, 'id'), None)
# pulse_times:
# 30 0.01
# 31 0.01
# read 0.02
# 31 0.01
# read 0.02

def pl(file):
    npz = uf.loadNpz(file)
    read1 = npz.array[:,slice_read1]
    read2 = npz.array[:,slice_read2]
    
    read1clas = ua.autoClassify(read1, width_tolerance=10, prominence_factor=0.04)
    read2clas = ua.autoClassify(read2, width_tolerance=10, prominence_factor=0.04)

    ids_triplet_read1 = [id_ for id_, trace in enumerate(read1clas) if np.all(trace == 0)]
    
    old_triplet_read2 = ua.multiget(read2clas, ids_triplet_read1)
    ids_triplet_read2 = [id_ for id_, trace in enumerate(old_triplet_read2) if np.all(trace == 0)]
    
    nb_singlet = len(old_triplet_read2) - len(ids_triplet_read2) 
    
    p_flip = nb_singlet / len(old_triplet_read2)
    
    return npz.rget('freq'), p_flip, nb_singlet

res = [pl(file) for file in tqdm(files)]

# %%% plot
res = np.asarray(res)
fig, ax = plt.subplots(figsize=(8,8))
ax.plot(res[:,0]*1e-9, res[:,1], marker='o', linestyle='--')

ax.set_xlabel('frequence (GHz)')
ax.set_ylabel('$P_{flip}$')

ax.legend()
ax.grid()
fig.show()

# %% testing on a file with drive
file = uf.loadNpz(LOG_PATH + '20240910/20240910-150828-drive_test.npz')
file.array = file.array.T
timelist = np.linspace(0, 0.07, len(file.array[0]))

# pulse_times:
# 30 0.01
# 31 0.01
# read 0.02
# 31 0.01
# read 0.02

slice_read1 = slice(ua.findNearest(timelist, 0.02, 'id'), ua.findNearest(timelist, 0.04, 'id'))
slice_read2 = slice(ua.findNearest(timelist, 0.05, 'id'), None)
read1 = file.array[:,slice_read1]
read2 = file.array[:,slice_read2]

read1clas = ua.autoClassify(read1, width_tolerance=10)
read2clas = ua.autoClassify(read2, width_tolerance=10)

ids_triplet_read1 = [id_ for id_, trace in enumerate(read1clas) if np.all(trace == 0)]
old_triplet_read2 = ua.multiget(read2clas, ids_triplet_read1)
ids_triplet_read2 = [id_ for id_, trace in enumerate(old_triplet_read2) if np.all(trace == 0)]

nb_singlet = len(old_triplet_read2) - len(ids_triplet_read2) 

p_flip = nb_singlet / len(old_triplet_read2)


# %%





